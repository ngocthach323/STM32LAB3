
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e70  08002e70  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08002e70  08002e70  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e70  08002e70  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08002e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200000f0  08002f68  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08002f68  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a12d  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf7  00000000  00000000  0002a246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f9  00000000  00000000  0002d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d05a  00000000  00000000  00044679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008228d  00000000  00000000  000516d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000d39b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e34 	.word	0x08002e34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08002e34 	.word	0x08002e34

0800014c <isButtonPressed>:
int keyReg2[10] = {NORMAL_STATE};
int keyReg3[10] = {NORMAL_STATE};
int TimeOutForKeyPress =  200;
int button_flag[10];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
        button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
    }
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000014c 	.word	0x2000014c

08000180 <getKeyInput>:

void getKeyInput() {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e081      	b.n	8000290 <getKeyInput+0x110>
        keyReg2[i] = keyReg1[i];
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <getKeyInput+0x124>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4944      	ldr	r1, [pc, #272]	; (80002a8 <getKeyInput+0x128>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        keyReg1[i] = keyReg0[i];
 800019c:	4a43      	ldr	r2, [pc, #268]	; (80002ac <getKeyInput+0x12c>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493f      	ldr	r1, [pc, #252]	; (80002a4 <getKeyInput+0x124>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (i == 0) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10b      	bne.n	80001ca <getKeyInput+0x4a>
        	//đọc chân button1
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80001b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b6:	483e      	ldr	r0, [pc, #248]	; (80002b0 <getKeyInput+0x130>)
 80001b8:	f001 fe10 	bl	8001ddc <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	4619      	mov	r1, r3
 80001c0:	4a3a      	ldr	r2, [pc, #232]	; (80002ac <getKeyInput+0x12c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001c8:	e01c      	b.n	8000204 <getKeyInput+0x84>
        }
        else if (i == 1) {
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d10b      	bne.n	80001e8 <getKeyInput+0x68>
        	//đọc chân button2
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80001d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d4:	4836      	ldr	r0, [pc, #216]	; (80002b0 <getKeyInput+0x130>)
 80001d6:	f001 fe01 	bl	8001ddc <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a33      	ldr	r2, [pc, #204]	; (80002ac <getKeyInput+0x12c>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e00d      	b.n	8000204 <getKeyInput+0x84>
        }
        else if (i == 2) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x84>
        	//đọc chân button3
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80001ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f2:	482f      	ldr	r0, [pc, #188]	; (80002b0 <getKeyInput+0x130>)
 80001f4:	f001 fdf2 	bl	8001ddc <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a2b      	ldr	r2, [pc, #172]	; (80002ac <getKeyInput+0x12c>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        if ((keyReg2[i] == keyReg1[i]) && (keyReg1[i] == keyReg0[i])) {
 8000204:	4a28      	ldr	r2, [pc, #160]	; (80002a8 <getKeyInput+0x128>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4925      	ldr	r1, [pc, #148]	; (80002a4 <getKeyInput+0x124>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d138      	bne.n	800028a <getKeyInput+0x10a>
 8000218:	4a22      	ldr	r2, [pc, #136]	; (80002a4 <getKeyInput+0x124>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	; (80002ac <getKeyInput+0x12c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d12e      	bne.n	800028a <getKeyInput+0x10a>
        	if (keyReg0[i] != keyReg3[i]) {
 800022c:	4a1f      	ldr	r2, [pc, #124]	; (80002ac <getKeyInput+0x12c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491f      	ldr	r1, [pc, #124]	; (80002b4 <getKeyInput+0x134>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d016      	beq.n	800026e <getKeyInput+0xee>
                keyReg3[i] = keyReg0[i];
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <getKeyInput+0x12c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	491a      	ldr	r1, [pc, #104]	; (80002b4 <getKeyInput+0x134>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (keyReg0[i] == PRESSED_STATE) {
 8000250:	4a16      	ldr	r2, [pc, #88]	; (80002ac <getKeyInput+0x12c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d116      	bne.n	800028a <getKeyInput+0x10a>
                	TimeOutForKeyPress = 200;
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <getKeyInput+0x138>)
 800025e:	22c8      	movs	r2, #200	; 0xc8
 8000260:	601a      	str	r2, [r3, #0]
                    button_flag[i] = 1;
 8000262:	4a16      	ldr	r2, [pc, #88]	; (80002bc <getKeyInput+0x13c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2101      	movs	r1, #1
 8000268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026c:	e00d      	b.n	800028a <getKeyInput+0x10a>
                }
            }
        	else {
        		TimeOutForKeyPress--;
 800026e:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <getKeyInput+0x138>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <getKeyInput+0x138>)
 8000276:	6013      	str	r3, [r2, #0]
        		if (TimeOutForKeyPress == 0) {
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <getKeyInput+0x138>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d104      	bne.n	800028a <getKeyInput+0x10a>
        			keyReg0[i] = NORMAL_STATE;
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <getKeyInput+0x12c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2101      	movs	r1, #1
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 10; i++) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b09      	cmp	r3, #9
 8000294:	f77f af7a 	ble.w	800018c <getKeyInput+0xc>
        		}
        	}

        }
    }
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028
 80002a8:	20000050 	.word	0x20000050
 80002ac:	20000000 	.word	0x20000000
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000078 	.word	0x20000078
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	2000014c 	.word	0x2000014c

080002c0 <fsm_traffic_ver>:

//biến trạng thái đèn giao thông chiều dọc và ngang
int status_traffic_ver = INIT_VER;
int status_traffic_hor = INIT_HOR;

void fsm_traffic_ver() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch (status_traffic_ver) {
 80002c4:	4b60      	ldr	r3, [pc, #384]	; (8000448 <fsm_traffic_ver+0x188>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b05      	subs	r3, #5
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	f200 80b9 	bhi.w	8000442 <fsm_traffic_ver+0x182>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_traffic_ver+0x18>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	080002e9 	.word	0x080002e9
 80002dc:	080002fb 	.word	0x080002fb
 80002e0:	080003cf 	.word	0x080003cf
 80002e4:	08000365 	.word	0x08000365
		case INIT_VER:
			setTimer(0, 1000); //count down
 80002e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002ec:	2000      	movs	r0, #0
 80002ee:	f001 f885 	bl	80013fc <setTimer>
			status_traffic_ver = RED_VER;
 80002f2:	4b55      	ldr	r3, [pc, #340]	; (8000448 <fsm_traffic_ver+0x188>)
 80002f4:	2206      	movs	r2, #6
 80002f6:	601a      	str	r2, [r3, #0]
			break;
 80002f8:	e0a3      	b.n	8000442 <fsm_traffic_ver+0x182>
		case RED_VER:
			red_led_ver();
 80002fa:	f001 f95d 	bl	80015b8 <red_led_ver>
			led_buffer_ver[0] = time_red_ver_temp / 10;
 80002fe:	4b53      	ldr	r3, [pc, #332]	; (800044c <fsm_traffic_ver+0x18c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a53      	ldr	r2, [pc, #332]	; (8000450 <fsm_traffic_ver+0x190>)
 8000304:	fb82 1203 	smull	r1, r2, r2, r3
 8000308:	1092      	asrs	r2, r2, #2
 800030a:	17db      	asrs	r3, r3, #31
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	4a51      	ldr	r2, [pc, #324]	; (8000454 <fsm_traffic_ver+0x194>)
 8000310:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_red_ver_temp % 10;
 8000312:	4b4e      	ldr	r3, [pc, #312]	; (800044c <fsm_traffic_ver+0x18c>)
 8000314:	6819      	ldr	r1, [r3, #0]
 8000316:	4b4e      	ldr	r3, [pc, #312]	; (8000450 <fsm_traffic_ver+0x190>)
 8000318:	fb83 2301 	smull	r2, r3, r3, r1
 800031c:	109a      	asrs	r2, r3, #2
 800031e:	17cb      	asrs	r3, r1, #31
 8000320:	1ad2      	subs	r2, r2, r3
 8000322:	4613      	mov	r3, r2
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	1aca      	subs	r2, r1, r3
 800032c:	4b49      	ldr	r3, [pc, #292]	; (8000454 <fsm_traffic_ver+0x194>)
 800032e:	605a      	str	r2, [r3, #4]

			if (timer_flag[0] == 1) {
 8000330:	4b49      	ldr	r3, [pc, #292]	; (8000458 <fsm_traffic_ver+0x198>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d17f      	bne.n	8000438 <fsm_traffic_ver+0x178>
				time_red_ver_temp--;
 8000338:	4b44      	ldr	r3, [pc, #272]	; (800044c <fsm_traffic_ver+0x18c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3b01      	subs	r3, #1
 800033e:	4a43      	ldr	r2, [pc, #268]	; (800044c <fsm_traffic_ver+0x18c>)
 8000340:	6013      	str	r3, [r2, #0]
				if (time_red_ver_temp == 0) {
 8000342:	4b42      	ldr	r3, [pc, #264]	; (800044c <fsm_traffic_ver+0x18c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d106      	bne.n	8000358 <fsm_traffic_ver+0x98>
					time_red_ver_temp = time_red_ver;
 800034a:	4b44      	ldr	r3, [pc, #272]	; (800045c <fsm_traffic_ver+0x19c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a3f      	ldr	r2, [pc, #252]	; (800044c <fsm_traffic_ver+0x18c>)
 8000350:	6013      	str	r3, [r2, #0]
					status_traffic_ver = GREEN_VER;
 8000352:	4b3d      	ldr	r3, [pc, #244]	; (8000448 <fsm_traffic_ver+0x188>)
 8000354:	2208      	movs	r2, #8
 8000356:	601a      	str	r2, [r3, #0]
				}
				setTimer(0, 1000);
 8000358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800035c:	2000      	movs	r0, #0
 800035e:	f001 f84d 	bl	80013fc <setTimer>
			}
			break;
 8000362:	e069      	b.n	8000438 <fsm_traffic_ver+0x178>
		case GREEN_VER:
			green_led_ver();
 8000364:	f001 f954 	bl	8001610 <green_led_ver>
			led_buffer_ver[0] = time_green_ver_temp / 10;
 8000368:	4b3d      	ldr	r3, [pc, #244]	; (8000460 <fsm_traffic_ver+0x1a0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a38      	ldr	r2, [pc, #224]	; (8000450 <fsm_traffic_ver+0x190>)
 800036e:	fb82 1203 	smull	r1, r2, r2, r3
 8000372:	1092      	asrs	r2, r2, #2
 8000374:	17db      	asrs	r3, r3, #31
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	4a36      	ldr	r2, [pc, #216]	; (8000454 <fsm_traffic_ver+0x194>)
 800037a:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_green_ver_temp % 10;
 800037c:	4b38      	ldr	r3, [pc, #224]	; (8000460 <fsm_traffic_ver+0x1a0>)
 800037e:	6819      	ldr	r1, [r3, #0]
 8000380:	4b33      	ldr	r3, [pc, #204]	; (8000450 <fsm_traffic_ver+0x190>)
 8000382:	fb83 2301 	smull	r2, r3, r3, r1
 8000386:	109a      	asrs	r2, r3, #2
 8000388:	17cb      	asrs	r3, r1, #31
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	1aca      	subs	r2, r1, r3
 8000396:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <fsm_traffic_ver+0x194>)
 8000398:	605a      	str	r2, [r3, #4]

			if (timer_flag[0] == 1) {
 800039a:	4b2f      	ldr	r3, [pc, #188]	; (8000458 <fsm_traffic_ver+0x198>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d14c      	bne.n	800043c <fsm_traffic_ver+0x17c>
				time_green_ver_temp--;
 80003a2:	4b2f      	ldr	r3, [pc, #188]	; (8000460 <fsm_traffic_ver+0x1a0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	4a2d      	ldr	r2, [pc, #180]	; (8000460 <fsm_traffic_ver+0x1a0>)
 80003aa:	6013      	str	r3, [r2, #0]
				if (time_green_ver_temp == 0) {
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <fsm_traffic_ver+0x1a0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d106      	bne.n	80003c2 <fsm_traffic_ver+0x102>
					time_green_ver_temp = time_green_ver;
 80003b4:	4b2b      	ldr	r3, [pc, #172]	; (8000464 <fsm_traffic_ver+0x1a4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a29      	ldr	r2, [pc, #164]	; (8000460 <fsm_traffic_ver+0x1a0>)
 80003ba:	6013      	str	r3, [r2, #0]
					status_traffic_ver = YELLOW_VER;
 80003bc:	4b22      	ldr	r3, [pc, #136]	; (8000448 <fsm_traffic_ver+0x188>)
 80003be:	2207      	movs	r2, #7
 80003c0:	601a      	str	r2, [r3, #0]
				}
				setTimer(0, 1000);
 80003c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003c6:	2000      	movs	r0, #0
 80003c8:	f001 f818 	bl	80013fc <setTimer>
			}
			break;
 80003cc:	e036      	b.n	800043c <fsm_traffic_ver+0x17c>
		case YELLOW_VER:
			yellow_led_ver();
 80003ce:	f001 f909 	bl	80015e4 <yellow_led_ver>
			led_buffer_ver[0] = time_yellow_ver_temp / 10;
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <fsm_traffic_ver+0x1a8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a1e      	ldr	r2, [pc, #120]	; (8000450 <fsm_traffic_ver+0x190>)
 80003d8:	fb82 1203 	smull	r1, r2, r2, r3
 80003dc:	1092      	asrs	r2, r2, #2
 80003de:	17db      	asrs	r3, r3, #31
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <fsm_traffic_ver+0x194>)
 80003e4:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_yellow_ver_temp % 10;
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <fsm_traffic_ver+0x1a8>)
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	4b19      	ldr	r3, [pc, #100]	; (8000450 <fsm_traffic_ver+0x190>)
 80003ec:	fb83 2301 	smull	r2, r3, r3, r1
 80003f0:	109a      	asrs	r2, r3, #2
 80003f2:	17cb      	asrs	r3, r1, #31
 80003f4:	1ad2      	subs	r2, r2, r3
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	1aca      	subs	r2, r1, r3
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <fsm_traffic_ver+0x194>)
 8000402:	605a      	str	r2, [r3, #4]

			if (timer_flag[0] == 1) {
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <fsm_traffic_ver+0x198>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d119      	bne.n	8000440 <fsm_traffic_ver+0x180>
				time_yellow_ver_temp--;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <fsm_traffic_ver+0x1a8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <fsm_traffic_ver+0x1a8>)
 8000414:	6013      	str	r3, [r2, #0]
				if (time_yellow_ver_temp == 0) {
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <fsm_traffic_ver+0x1a8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d106      	bne.n	800042c <fsm_traffic_ver+0x16c>
					time_yellow_ver_temp = time_yellow_ver;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <fsm_traffic_ver+0x1ac>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a11      	ldr	r2, [pc, #68]	; (8000468 <fsm_traffic_ver+0x1a8>)
 8000424:	6013      	str	r3, [r2, #0]
					status_traffic_ver = RED_VER;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <fsm_traffic_ver+0x188>)
 8000428:	2206      	movs	r2, #6
 800042a:	601a      	str	r2, [r3, #0]
				}
				setTimer(0, 1000);
 800042c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000430:	2000      	movs	r0, #0
 8000432:	f000 ffe3 	bl	80013fc <setTimer>
			}
			break;
 8000436:	e003      	b.n	8000440 <fsm_traffic_ver+0x180>
			break;
 8000438:	bf00      	nop
 800043a:	e002      	b.n	8000442 <fsm_traffic_ver+0x182>
			break;
 800043c:	bf00      	nop
 800043e:	e000      	b.n	8000442 <fsm_traffic_ver+0x182>
			break;
 8000440:	bf00      	nop
	}
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200000a4 	.word	0x200000a4
 800044c:	200000bc 	.word	0x200000bc
 8000450:	66666667 	.word	0x66666667
 8000454:	20000114 	.word	0x20000114
 8000458:	200001bc 	.word	0x200001bc
 800045c:	200000b4 	.word	0x200000b4
 8000460:	200000dc 	.word	0x200000dc
 8000464:	200000d4 	.word	0x200000d4
 8000468:	200000cc 	.word	0x200000cc
 800046c:	200000c4 	.word	0x200000c4

08000470 <fsm_traffic_hor>:

void fsm_traffic_hor() {
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	switch (status_traffic_hor) {
 8000474:	4b60      	ldr	r3, [pc, #384]	; (80005f8 <fsm_traffic_hor+0x188>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3b09      	subs	r3, #9
 800047a:	2b03      	cmp	r3, #3
 800047c:	f200 80b9 	bhi.w	80005f2 <fsm_traffic_hor+0x182>
 8000480:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <fsm_traffic_hor+0x18>)
 8000482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000486:	bf00      	nop
 8000488:	08000499 	.word	0x08000499
 800048c:	0800057f 	.word	0x0800057f
 8000490:	08000515 	.word	0x08000515
 8000494:	080004ab 	.word	0x080004ab
		case INIT_HOR:
			setTimer(1, 1000); //count down
 8000498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800049c:	2001      	movs	r0, #1
 800049e:	f000 ffad 	bl	80013fc <setTimer>
			status_traffic_hor = GREEN_HOR;
 80004a2:	4b55      	ldr	r3, [pc, #340]	; (80005f8 <fsm_traffic_hor+0x188>)
 80004a4:	220c      	movs	r2, #12
 80004a6:	601a      	str	r2, [r3, #0]
			break;
 80004a8:	e0a3      	b.n	80005f2 <fsm_traffic_hor+0x182>
		case GREEN_HOR:
			green_led_hor();
 80004aa:	f001 f8f3 	bl	8001694 <green_led_hor>
			led_buffer_hor[0] = time_green_hor_temp / 10;
 80004ae:	4b53      	ldr	r3, [pc, #332]	; (80005fc <fsm_traffic_hor+0x18c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a53      	ldr	r2, [pc, #332]	; (8000600 <fsm_traffic_hor+0x190>)
 80004b4:	fb82 1203 	smull	r1, r2, r2, r3
 80004b8:	1092      	asrs	r2, r2, #2
 80004ba:	17db      	asrs	r3, r3, #31
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	4a51      	ldr	r2, [pc, #324]	; (8000604 <fsm_traffic_hor+0x194>)
 80004c0:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_green_hor_temp % 10;
 80004c2:	4b4e      	ldr	r3, [pc, #312]	; (80005fc <fsm_traffic_hor+0x18c>)
 80004c4:	6819      	ldr	r1, [r3, #0]
 80004c6:	4b4e      	ldr	r3, [pc, #312]	; (8000600 <fsm_traffic_hor+0x190>)
 80004c8:	fb83 2301 	smull	r2, r3, r3, r1
 80004cc:	109a      	asrs	r2, r3, #2
 80004ce:	17cb      	asrs	r3, r1, #31
 80004d0:	1ad2      	subs	r2, r2, r3
 80004d2:	4613      	mov	r3, r2
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	4413      	add	r3, r2
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	1aca      	subs	r2, r1, r3
 80004dc:	4b49      	ldr	r3, [pc, #292]	; (8000604 <fsm_traffic_hor+0x194>)
 80004de:	605a      	str	r2, [r3, #4]

			if (timer_flag[1] == 1) {
 80004e0:	4b49      	ldr	r3, [pc, #292]	; (8000608 <fsm_traffic_hor+0x198>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d17f      	bne.n	80005e8 <fsm_traffic_hor+0x178>
				time_green_hor_temp--;
 80004e8:	4b44      	ldr	r3, [pc, #272]	; (80005fc <fsm_traffic_hor+0x18c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	4a43      	ldr	r2, [pc, #268]	; (80005fc <fsm_traffic_hor+0x18c>)
 80004f0:	6013      	str	r3, [r2, #0]
				if (time_green_hor_temp == 0) {
 80004f2:	4b42      	ldr	r3, [pc, #264]	; (80005fc <fsm_traffic_hor+0x18c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d106      	bne.n	8000508 <fsm_traffic_hor+0x98>
					time_green_hor_temp = time_green_hor;
 80004fa:	4b44      	ldr	r3, [pc, #272]	; (800060c <fsm_traffic_hor+0x19c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a3f      	ldr	r2, [pc, #252]	; (80005fc <fsm_traffic_hor+0x18c>)
 8000500:	6013      	str	r3, [r2, #0]
					status_traffic_hor = YELLOW_HOR;
 8000502:	4b3d      	ldr	r3, [pc, #244]	; (80005f8 <fsm_traffic_hor+0x188>)
 8000504:	220b      	movs	r2, #11
 8000506:	601a      	str	r2, [r3, #0]
				}
				setTimer(1, 1000);
 8000508:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800050c:	2001      	movs	r0, #1
 800050e:	f000 ff75 	bl	80013fc <setTimer>
			}
			break;
 8000512:	e069      	b.n	80005e8 <fsm_traffic_hor+0x178>
		case YELLOW_HOR:
			yellow_led_hor();
 8000514:	f001 f8a8 	bl	8001668 <yellow_led_hor>
			led_buffer_hor[0] = time_yellow_hor_temp / 10;
 8000518:	4b3d      	ldr	r3, [pc, #244]	; (8000610 <fsm_traffic_hor+0x1a0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a38      	ldr	r2, [pc, #224]	; (8000600 <fsm_traffic_hor+0x190>)
 800051e:	fb82 1203 	smull	r1, r2, r2, r3
 8000522:	1092      	asrs	r2, r2, #2
 8000524:	17db      	asrs	r3, r3, #31
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	4a36      	ldr	r2, [pc, #216]	; (8000604 <fsm_traffic_hor+0x194>)
 800052a:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_yellow_hor_temp % 10;
 800052c:	4b38      	ldr	r3, [pc, #224]	; (8000610 <fsm_traffic_hor+0x1a0>)
 800052e:	6819      	ldr	r1, [r3, #0]
 8000530:	4b33      	ldr	r3, [pc, #204]	; (8000600 <fsm_traffic_hor+0x190>)
 8000532:	fb83 2301 	smull	r2, r3, r3, r1
 8000536:	109a      	asrs	r2, r3, #2
 8000538:	17cb      	asrs	r3, r1, #31
 800053a:	1ad2      	subs	r2, r2, r3
 800053c:	4613      	mov	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	1aca      	subs	r2, r1, r3
 8000546:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <fsm_traffic_hor+0x194>)
 8000548:	605a      	str	r2, [r3, #4]

			if (timer_flag[1] == 1) {
 800054a:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <fsm_traffic_hor+0x198>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d14c      	bne.n	80005ec <fsm_traffic_hor+0x17c>
				time_yellow_hor_temp--;
 8000552:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <fsm_traffic_hor+0x1a0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a2d      	ldr	r2, [pc, #180]	; (8000610 <fsm_traffic_hor+0x1a0>)
 800055a:	6013      	str	r3, [r2, #0]
				if (time_yellow_hor_temp == 0) {
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <fsm_traffic_hor+0x1a0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d106      	bne.n	8000572 <fsm_traffic_hor+0x102>
					time_yellow_hor_temp = time_yellow_hor;
 8000564:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <fsm_traffic_hor+0x1a4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a29      	ldr	r2, [pc, #164]	; (8000610 <fsm_traffic_hor+0x1a0>)
 800056a:	6013      	str	r3, [r2, #0]
					status_traffic_hor = RED_HOR;
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <fsm_traffic_hor+0x188>)
 800056e:	220a      	movs	r2, #10
 8000570:	601a      	str	r2, [r3, #0]
				}
				setTimer(1, 1000);
 8000572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000576:	2001      	movs	r0, #1
 8000578:	f000 ff40 	bl	80013fc <setTimer>
			}
			break;
 800057c:	e036      	b.n	80005ec <fsm_traffic_hor+0x17c>
		case RED_HOR:
			red_led_hor();
 800057e:	f001 f85d 	bl	800163c <red_led_hor>
			led_buffer_hor[0] = time_red_hor_temp / 10;
 8000582:	4b25      	ldr	r3, [pc, #148]	; (8000618 <fsm_traffic_hor+0x1a8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <fsm_traffic_hor+0x190>)
 8000588:	fb82 1203 	smull	r1, r2, r2, r3
 800058c:	1092      	asrs	r2, r2, #2
 800058e:	17db      	asrs	r3, r3, #31
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <fsm_traffic_hor+0x194>)
 8000594:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_red_hor_temp % 10;
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <fsm_traffic_hor+0x1a8>)
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <fsm_traffic_hor+0x190>)
 800059c:	fb83 2301 	smull	r2, r3, r3, r1
 80005a0:	109a      	asrs	r2, r3, #2
 80005a2:	17cb      	asrs	r3, r1, #31
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	1aca      	subs	r2, r1, r3
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <fsm_traffic_hor+0x194>)
 80005b2:	605a      	str	r2, [r3, #4]

			if (timer_flag[1] == 1) {
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <fsm_traffic_hor+0x198>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d119      	bne.n	80005f0 <fsm_traffic_hor+0x180>
				time_red_hor_temp--;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <fsm_traffic_hor+0x1a8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <fsm_traffic_hor+0x1a8>)
 80005c4:	6013      	str	r3, [r2, #0]
				if (time_red_hor_temp == 0) {
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <fsm_traffic_hor+0x1a8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <fsm_traffic_hor+0x16c>
					time_red_hor_temp = time_red_hor;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <fsm_traffic_hor+0x1ac>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <fsm_traffic_hor+0x1a8>)
 80005d4:	6013      	str	r3, [r2, #0]
					status_traffic_hor = GREEN_HOR;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <fsm_traffic_hor+0x188>)
 80005d8:	220c      	movs	r2, #12
 80005da:	601a      	str	r2, [r3, #0]
				}
				setTimer(1, 1000);
 80005dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 ff0b 	bl	80013fc <setTimer>
			}
			break;
 80005e6:	e003      	b.n	80005f0 <fsm_traffic_hor+0x180>
			break;
 80005e8:	bf00      	nop
 80005ea:	e002      	b.n	80005f2 <fsm_traffic_hor+0x182>
			break;
 80005ec:	bf00      	nop
 80005ee:	e000      	b.n	80005f2 <fsm_traffic_hor+0x182>
			break;
 80005f0:	bf00      	nop
	}
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000a8 	.word	0x200000a8
 80005fc:	200000e0 	.word	0x200000e0
 8000600:	66666667 	.word	0x66666667
 8000604:	2000011c 	.word	0x2000011c
 8000608:	200001bc 	.word	0x200001bc
 800060c:	200000d8 	.word	0x200000d8
 8000610:	200000d0 	.word	0x200000d0
 8000614:	200000c8 	.word	0x200000c8
 8000618:	200000c0 	.word	0x200000c0
 800061c:	200000b8 	.word	0x200000b8

08000620 <fsm_automatic>:

void fsm_automatic() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	if (status_system == AUTO) {
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <fsm_automatic+0x1c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d104      	bne.n	8000636 <fsm_automatic+0x16>
	    fsm_traffic_ver();
 800062c:	f7ff fe48 	bl	80002c0 <fsm_traffic_ver>
	    fsm_traffic_hor();
 8000630:	f7ff ff1e 	bl	8000470 <fsm_traffic_hor>
 8000634:	e000      	b.n	8000638 <fsm_automatic+0x18>
	}
	else return;
 8000636:	bf00      	nop
}
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000ac 	.word	0x200000ac

08000640 <fsm_manual>:
 */
#include "fsm_manual.h"

int status_system = AUTO;

void fsm_manual() {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	switch(status_system) {
 8000644:	4b5b      	ldr	r3, [pc, #364]	; (80007b4 <fsm_manual+0x174>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3b01      	subs	r3, #1
 800064a:	2b03      	cmp	r3, #3
 800064c:	f200 8084 	bhi.w	8000758 <fsm_manual+0x118>
 8000650:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <fsm_manual+0x18>)
 8000652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000656:	bf00      	nop
 8000658:	08000669 	.word	0x08000669
 800065c:	0800067d 	.word	0x0800067d
 8000660:	080006b3 	.word	0x080006b3
 8000664:	080006f9 	.word	0x080006f9
		case AUTO: //đèn hoạt động bình thường
			//button1
			if (isButtonPressed(0) == 1) {
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff fd6f 	bl	800014c <isButtonPressed>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d16a      	bne.n	800074a <fsm_manual+0x10a>
				status_system = RED_LED;
 8000674:	4b4f      	ldr	r3, [pc, #316]	; (80007b4 <fsm_manual+0x174>)
 8000676:	2202      	movs	r2, #2
 8000678:	601a      	str	r2, [r3, #0]
			}
			break;
 800067a:	e066      	b.n	800074a <fsm_manual+0x10a>
		case RED_LED: //thiết lập time cho 4 led red
			status_modify = RED_MODIFY;
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <fsm_manual+0x178>)
 800067e:	220d      	movs	r2, #13
 8000680:	601a      	str	r2, [r3, #0]
			//button3
			if (isButtonPressed(2) == 1) {
 8000682:	2002      	movs	r0, #2
 8000684:	f7ff fd62 	bl	800014c <isButtonPressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d107      	bne.n	800069e <fsm_manual+0x5e>
				time_red_ver_temp = time_red_ver;
 800068e:	4b4b      	ldr	r3, [pc, #300]	; (80007bc <fsm_manual+0x17c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a4b      	ldr	r2, [pc, #300]	; (80007c0 <fsm_manual+0x180>)
 8000694:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 8000696:	4b4b      	ldr	r3, [pc, #300]	; (80007c4 <fsm_manual+0x184>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a4b      	ldr	r2, [pc, #300]	; (80007c8 <fsm_manual+0x188>)
 800069c:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fd54 	bl	800014c <isButtonPressed>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d151      	bne.n	800074e <fsm_manual+0x10e>
				status_system = YELLOW_LED;
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <fsm_manual+0x174>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	601a      	str	r2, [r3, #0]
			}
			break;
 80006b0:	e04d      	b.n	800074e <fsm_manual+0x10e>
		case YELLOW_LED: //thiết lập time cho 4 led yellow
			status_modify = YELLOW_MODIFY;
 80006b2:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <fsm_manual+0x178>)
 80006b4:	220e      	movs	r2, #14
 80006b6:	601a      	str	r2, [r3, #0]
			//button3
			if (isButtonPressed(2) == 1) {
 80006b8:	2002      	movs	r0, #2
 80006ba:	f7ff fd47 	bl	800014c <isButtonPressed>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10f      	bne.n	80006e4 <fsm_manual+0xa4>
				time_yellow_ver_temp = time_yellow_ver;
 80006c4:	4b41      	ldr	r3, [pc, #260]	; (80007cc <fsm_manual+0x18c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a41      	ldr	r2, [pc, #260]	; (80007d0 <fsm_manual+0x190>)
 80006ca:	6013      	str	r3, [r2, #0]
				time_yellow_hor_temp = time_yellow_hor;
 80006cc:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <fsm_manual+0x194>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a41      	ldr	r2, [pc, #260]	; (80007d8 <fsm_manual+0x198>)
 80006d2:	6013      	str	r3, [r2, #0]
				//sau khi check cập nhật lại countdown đèn đỏ
				time_red_ver_temp = time_red_ver;
 80006d4:	4b39      	ldr	r3, [pc, #228]	; (80007bc <fsm_manual+0x17c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a39      	ldr	r2, [pc, #228]	; (80007c0 <fsm_manual+0x180>)
 80006da:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <fsm_manual+0x184>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a39      	ldr	r2, [pc, #228]	; (80007c8 <fsm_manual+0x188>)
 80006e2:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fd31 	bl	800014c <isButtonPressed>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d130      	bne.n	8000752 <fsm_manual+0x112>
				status_system = GREEN_LED;
 80006f0:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <fsm_manual+0x174>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	601a      	str	r2, [r3, #0]
			}
			break;
 80006f6:	e02c      	b.n	8000752 <fsm_manual+0x112>
		case GREEN_LED: ////thiết lập time cho 4 led green
			status_modify = GREEN_MODIFY;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <fsm_manual+0x178>)
 80006fa:	220f      	movs	r2, #15
 80006fc:	601a      	str	r2, [r3, #0]
			//button3
			if (isButtonPressed(2) == 1) {
 80006fe:	2002      	movs	r0, #2
 8000700:	f7ff fd24 	bl	800014c <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d10f      	bne.n	800072a <fsm_manual+0xea>
				time_green_ver_temp = time_green_ver;
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <fsm_manual+0x19c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a34      	ldr	r2, [pc, #208]	; (80007e0 <fsm_manual+0x1a0>)
 8000710:	6013      	str	r3, [r2, #0]
				time_green_hor_temp = time_green_hor;
 8000712:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <fsm_manual+0x1a4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a34      	ldr	r2, [pc, #208]	; (80007e8 <fsm_manual+0x1a8>)
 8000718:	6013      	str	r3, [r2, #0]
				//sau khi check cập nhật lại countdown đèn đỏ
				time_red_ver_temp = time_red_ver;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <fsm_manual+0x17c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a28      	ldr	r2, [pc, #160]	; (80007c0 <fsm_manual+0x180>)
 8000720:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <fsm_manual+0x184>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a28      	ldr	r2, [pc, #160]	; (80007c8 <fsm_manual+0x188>)
 8000728:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff fd0e 	bl	800014c <isButtonPressed>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10f      	bne.n	8000756 <fsm_manual+0x116>
				status_traffic_ver = INIT_VER;
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <fsm_manual+0x1ac>)
 8000738:	2205      	movs	r2, #5
 800073a:	601a      	str	r2, [r3, #0]
				status_traffic_hor = INIT_HOR;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <fsm_manual+0x1b0>)
 800073e:	2209      	movs	r2, #9
 8000740:	601a      	str	r2, [r3, #0]
				status_system = AUTO;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <fsm_manual+0x174>)
 8000744:	2201      	movs	r2, #1
 8000746:	601a      	str	r2, [r3, #0]
			}
			break;
 8000748:	e005      	b.n	8000756 <fsm_manual+0x116>
			break;
 800074a:	bf00      	nop
 800074c:	e004      	b.n	8000758 <fsm_manual+0x118>
			break;
 800074e:	bf00      	nop
 8000750:	e002      	b.n	8000758 <fsm_manual+0x118>
			break;
 8000752:	bf00      	nop
 8000754:	e000      	b.n	8000758 <fsm_manual+0x118>
			break;
 8000756:	bf00      	nop
	}
	//hiển thị led
	if (timer_flag[2] == 1) {
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <fsm_manual+0x1b4>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d126      	bne.n	80007ae <fsm_manual+0x16e>
		update_7SEG_ver(idx_vertical);
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <fsm_manual+0x1b8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fca9 	bl	80010bc <update_7SEG_ver>
		idx_vertical++;
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <fsm_manual+0x1b8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <fsm_manual+0x1b8>)
 8000772:	6013      	str	r3, [r2, #0]
		if(idx_vertical == 2) {
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <fsm_manual+0x1b8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d102      	bne.n	8000782 <fsm_manual+0x142>
			idx_vertical = 0;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <fsm_manual+0x1b8>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
		}

		update_7SEG_hor(idx_horizontal);
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <fsm_manual+0x1bc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fcce 	bl	8001128 <update_7SEG_hor>
		idx_horizontal++;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <fsm_manual+0x1bc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <fsm_manual+0x1bc>)
 8000794:	6013      	str	r3, [r2, #0]
		if (idx_horizontal == 2) {
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <fsm_manual+0x1bc>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d102      	bne.n	80007a4 <fsm_manual+0x164>
			idx_horizontal = 0;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <fsm_manual+0x1bc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
		}
		setTimer(2, 500);
 80007a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007a8:	2002      	movs	r0, #2
 80007aa:	f000 fe27 	bl	80013fc <setTimer>
	}
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000ac 	.word	0x200000ac
 80007b8:	200000b0 	.word	0x200000b0
 80007bc:	200000b4 	.word	0x200000b4
 80007c0:	200000bc 	.word	0x200000bc
 80007c4:	200000b8 	.word	0x200000b8
 80007c8:	200000c0 	.word	0x200000c0
 80007cc:	200000c4 	.word	0x200000c4
 80007d0:	200000cc 	.word	0x200000cc
 80007d4:	200000c8 	.word	0x200000c8
 80007d8:	200000d0 	.word	0x200000d0
 80007dc:	200000d4 	.word	0x200000d4
 80007e0:	200000dc 	.word	0x200000dc
 80007e4:	200000d8 	.word	0x200000d8
 80007e8:	200000e0 	.word	0x200000e0
 80007ec:	200000a4 	.word	0x200000a4
 80007f0:	200000a8 	.word	0x200000a8
 80007f4:	200001bc 	.word	0x200001bc
 80007f8:	2000010c 	.word	0x2000010c
 80007fc:	20000110 	.word	0x20000110

08000800 <fsm_setting>:
 */
#include "fsm_setting.h"

int status_modify = RED_MODIFY;

void fsm_setting() {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	if (status_system == AUTO) {
 8000804:	4b76      	ldr	r3, [pc, #472]	; (80009e0 <fsm_setting+0x1e0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	f000 80e7 	beq.w	80009dc <fsm_setting+0x1dc>
		return;
	}
	switch (status_modify) {
 800080e:	4b75      	ldr	r3, [pc, #468]	; (80009e4 <fsm_setting+0x1e4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b0f      	cmp	r3, #15
 8000814:	f000 8093 	beq.w	800093e <fsm_setting+0x13e>
 8000818:	2b0f      	cmp	r3, #15
 800081a:	f300 80e0 	bgt.w	80009de <fsm_setting+0x1de>
 800081e:	2b0d      	cmp	r3, #13
 8000820:	d002      	beq.n	8000828 <fsm_setting+0x28>
 8000822:	2b0e      	cmp	r3, #14
 8000824:	d03c      	beq.n	80008a0 <fsm_setting+0xa0>
 8000826:	e0da      	b.n	80009de <fsm_setting+0x1de>
		case RED_MODIFY:
			//tắt đèn vàng và xanh
			turn_off_yellow_green();
 8000828:	f000 ff76 	bl	8001718 <turn_off_yellow_green>
			if (timer_flag[4] == 1) {
 800082c:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <fsm_setting+0x1e8>)
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d105      	bne.n	8000840 <fsm_setting+0x40>
				//nhấp nháy đèn đỏ
				toggle_red_led();
 8000834:	f000 ff44 	bl	80016c0 <toggle_red_led>
				setTimer(4, 250);
 8000838:	21fa      	movs	r1, #250	; 0xfa
 800083a:	2004      	movs	r0, #4
 800083c:	f000 fdde 	bl	80013fc <setTimer>
			}
			//button2
			if (isButtonPressed(1) == 1) {
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fc83 	bl	800014c <isButtonPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d109      	bne.n	8000860 <fsm_setting+0x60>
				time_red_ver++;
 800084c:	4b67      	ldr	r3, [pc, #412]	; (80009ec <fsm_setting+0x1ec>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a66      	ldr	r2, [pc, #408]	; (80009ec <fsm_setting+0x1ec>)
 8000854:	6013      	str	r3, [r2, #0]
				time_red_hor++;
 8000856:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <fsm_setting+0x1f0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a64      	ldr	r2, [pc, #400]	; (80009f0 <fsm_setting+0x1f0>)
 800085e:	6013      	str	r3, [r2, #0]
			}
			//update buffer
			led_buffer_ver[0] = time_red_ver / 10;
 8000860:	4b62      	ldr	r3, [pc, #392]	; (80009ec <fsm_setting+0x1ec>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <fsm_setting+0x1f4>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1092      	asrs	r2, r2, #2
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	4a61      	ldr	r2, [pc, #388]	; (80009f8 <fsm_setting+0x1f8>)
 8000872:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_red_ver % 10;
 8000874:	4b5d      	ldr	r3, [pc, #372]	; (80009ec <fsm_setting+0x1ec>)
 8000876:	6819      	ldr	r1, [r3, #0]
 8000878:	4b5e      	ldr	r3, [pc, #376]	; (80009f4 <fsm_setting+0x1f4>)
 800087a:	fb83 2301 	smull	r2, r3, r3, r1
 800087e:	109a      	asrs	r2, r3, #2
 8000880:	17cb      	asrs	r3, r1, #31
 8000882:	1ad2      	subs	r2, r2, r3
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	1aca      	subs	r2, r1, r3
 800088e:	4b5a      	ldr	r3, [pc, #360]	; (80009f8 <fsm_setting+0x1f8>)
 8000890:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <fsm_setting+0x1fc>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 1;
 8000898:	4b58      	ldr	r3, [pc, #352]	; (80009fc <fsm_setting+0x1fc>)
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
			break;
 800089e:	e09e      	b.n	80009de <fsm_setting+0x1de>
		case YELLOW_MODIFY:
			//tắt đèn đỏ và xanh
			turn_off_red_green();
 80008a0:	f000 ff56 	bl	8001750 <turn_off_red_green>
			if (timer_flag[4] == 1) {
 80008a4:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <fsm_setting+0x1e8>)
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d105      	bne.n	80008b8 <fsm_setting+0xb8>
				//nhấp nháy đèn vàng
				toggle_yellow_led();
 80008ac:	f000 ff16 	bl	80016dc <toggle_yellow_led>
				setTimer(4, 250);
 80008b0:	21fa      	movs	r1, #250	; 0xfa
 80008b2:	2004      	movs	r0, #4
 80008b4:	f000 fda2 	bl	80013fc <setTimer>
			}
			//button2
			if (isButtonPressed(1) == 1) {
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fc47 	bl	800014c <isButtonPressed>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d11c      	bne.n	80008fe <fsm_setting+0xfe>
				time_yellow_ver++;
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <fsm_setting+0x200>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <fsm_setting+0x200>)
 80008cc:	6013      	str	r3, [r2, #0]
				time_yellow_hor++;
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <fsm_setting+0x204>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4a4b      	ldr	r2, [pc, #300]	; (8000a04 <fsm_setting+0x204>)
 80008d6:	6013      	str	r3, [r2, #0]
				//check
				if (time_yellow_ver + time_green_ver > time_red_ver) {
 80008d8:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <fsm_setting+0x200>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <fsm_setting+0x208>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	441a      	add	r2, r3
 80008e2:	4b42      	ldr	r3, [pc, #264]	; (80009ec <fsm_setting+0x1ec>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dd09      	ble.n	80008fe <fsm_setting+0xfe>
					time_red_ver++;
 80008ea:	4b40      	ldr	r3, [pc, #256]	; (80009ec <fsm_setting+0x1ec>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	4a3e      	ldr	r2, [pc, #248]	; (80009ec <fsm_setting+0x1ec>)
 80008f2:	6013      	str	r3, [r2, #0]
					time_red_hor++;
 80008f4:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <fsm_setting+0x1f0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	4a3d      	ldr	r2, [pc, #244]	; (80009f0 <fsm_setting+0x1f0>)
 80008fc:	6013      	str	r3, [r2, #0]
				}
			}
			//update buffer
			led_buffer_ver[0] = time_yellow_ver / 10;
 80008fe:	4b40      	ldr	r3, [pc, #256]	; (8000a00 <fsm_setting+0x200>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a3c      	ldr	r2, [pc, #240]	; (80009f4 <fsm_setting+0x1f4>)
 8000904:	fb82 1203 	smull	r1, r2, r2, r3
 8000908:	1092      	asrs	r2, r2, #2
 800090a:	17db      	asrs	r3, r3, #31
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <fsm_setting+0x1f8>)
 8000910:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_yellow_ver % 10;
 8000912:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <fsm_setting+0x200>)
 8000914:	6819      	ldr	r1, [r3, #0]
 8000916:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <fsm_setting+0x1f4>)
 8000918:	fb83 2301 	smull	r2, r3, r3, r1
 800091c:	109a      	asrs	r2, r3, #2
 800091e:	17cb      	asrs	r3, r1, #31
 8000920:	1ad2      	subs	r2, r2, r3
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1aca      	subs	r2, r1, r3
 800092c:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <fsm_setting+0x1f8>)
 800092e:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 8000930:	4b32      	ldr	r3, [pc, #200]	; (80009fc <fsm_setting+0x1fc>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 2;
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <fsm_setting+0x1fc>)
 8000938:	2202      	movs	r2, #2
 800093a:	605a      	str	r2, [r3, #4]
			break;
 800093c:	e04f      	b.n	80009de <fsm_setting+0x1de>
		case GREEN_MODIFY:
			//tắt đèn đỏ và vàng
			turn_off_red_yellow();
 800093e:	f000 ff23 	bl	8001788 <turn_off_red_yellow>
			if (timer_flag[4] == 1) {
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <fsm_setting+0x1e8>)
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d105      	bne.n	8000956 <fsm_setting+0x156>
				//nhấp nháy đèn xanh
				toggle_green_led();
 800094a:	f000 fed5 	bl	80016f8 <toggle_green_led>
				setTimer(4, 250);
 800094e:	21fa      	movs	r1, #250	; 0xfa
 8000950:	2004      	movs	r0, #4
 8000952:	f000 fd53 	bl	80013fc <setTimer>
			}
			//button2
			if (isButtonPressed(1) == 1) {
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fbf8 	bl	800014c <isButtonPressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d11c      	bne.n	800099c <fsm_setting+0x19c>
				time_green_ver++;
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <fsm_setting+0x208>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <fsm_setting+0x208>)
 800096a:	6013      	str	r3, [r2, #0]
				time_green_hor++;
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <fsm_setting+0x20c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <fsm_setting+0x20c>)
 8000974:	6013      	str	r3, [r2, #0]
				//check
				if (time_yellow_ver + time_green_ver > time_red_ver) {
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <fsm_setting+0x200>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <fsm_setting+0x208>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	441a      	add	r2, r3
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <fsm_setting+0x1ec>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	dd09      	ble.n	800099c <fsm_setting+0x19c>
					time_red_ver++;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <fsm_setting+0x1ec>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <fsm_setting+0x1ec>)
 8000990:	6013      	str	r3, [r2, #0]
					time_red_hor++;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <fsm_setting+0x1f0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <fsm_setting+0x1f0>)
 800099a:	6013      	str	r3, [r2, #0]
				}
			}
			//update buffer
			led_buffer_ver[0] = time_green_ver / 10;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <fsm_setting+0x208>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <fsm_setting+0x1f4>)
 80009a2:	fb82 1203 	smull	r1, r2, r2, r3
 80009a6:	1092      	asrs	r2, r2, #2
 80009a8:	17db      	asrs	r3, r3, #31
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <fsm_setting+0x1f8>)
 80009ae:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_green_ver % 10;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <fsm_setting+0x208>)
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <fsm_setting+0x1f4>)
 80009b6:	fb83 2301 	smull	r2, r3, r3, r1
 80009ba:	109a      	asrs	r2, r3, #2
 80009bc:	17cb      	asrs	r3, r1, #31
 80009be:	1ad2      	subs	r2, r2, r3
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	1aca      	subs	r2, r1, r3
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <fsm_setting+0x1f8>)
 80009cc:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <fsm_setting+0x1fc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 3;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <fsm_setting+0x1fc>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	605a      	str	r2, [r3, #4]
			break;
 80009da:	e000      	b.n	80009de <fsm_setting+0x1de>
		return;
 80009dc:	bf00      	nop
	}
}
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000ac 	.word	0x200000ac
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	200001bc 	.word	0x200001bc
 80009ec:	200000b4 	.word	0x200000b4
 80009f0:	200000b8 	.word	0x200000b8
 80009f4:	66666667 	.word	0x66666667
 80009f8:	20000114 	.word	0x20000114
 80009fc:	2000011c 	.word	0x2000011c
 8000a00:	200000c4 	.word	0x200000c4
 8000a04:	200000c8 	.word	0x200000c8
 8000a08:	200000d4 	.word	0x200000d4
 8000a0c:	200000d8 	.word	0x200000d8

08000a10 <display7SEG_ver>:
//biến giá trị đầu vào của 7SEG;
int led_buffer_ver[2] = {0, 0};
int led_buffer_hor[2] = {0, 0};

//hiển thị led7
void display7SEG_ver(int num) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d129      	bne.n	8000a72 <display7SEG_ver+0x62>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a24:	48d3      	ldr	r0, [pc, #844]	; (8000d74 <display7SEG_ver+0x364>)
 8000a26:	f001 f9f0 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a30:	48d0      	ldr	r0, [pc, #832]	; (8000d74 <display7SEG_ver+0x364>)
 8000a32:	f001 f9ea 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3c:	48cd      	ldr	r0, [pc, #820]	; (8000d74 <display7SEG_ver+0x364>)
 8000a3e:	f001 f9e4 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a48:	48ca      	ldr	r0, [pc, #808]	; (8000d74 <display7SEG_ver+0x364>)
 8000a4a:	f001 f9de 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	48c7      	ldr	r0, [pc, #796]	; (8000d74 <display7SEG_ver+0x364>)
 8000a56:	f001 f9d8 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	48c4      	ldr	r0, [pc, #784]	; (8000d74 <display7SEG_ver+0x364>)
 8000a62:	f001 f9d2 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6c:	48c1      	ldr	r0, [pc, #772]	; (8000d74 <display7SEG_ver+0x364>)
 8000a6e:	f001 f9cc 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 1) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d129      	bne.n	8000acc <display7SEG_ver+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	48bd      	ldr	r0, [pc, #756]	; (8000d74 <display7SEG_ver+0x364>)
 8000a80:	f001 f9c3 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8a:	48ba      	ldr	r0, [pc, #744]	; (8000d74 <display7SEG_ver+0x364>)
 8000a8c:	f001 f9bd 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a96:	48b7      	ldr	r0, [pc, #732]	; (8000d74 <display7SEG_ver+0x364>)
 8000a98:	f001 f9b7 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa2:	48b4      	ldr	r0, [pc, #720]	; (8000d74 <display7SEG_ver+0x364>)
 8000aa4:	f001 f9b1 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	48b1      	ldr	r0, [pc, #708]	; (8000d74 <display7SEG_ver+0x364>)
 8000ab0:	f001 f9ab 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	48ae      	ldr	r0, [pc, #696]	; (8000d74 <display7SEG_ver+0x364>)
 8000abc:	f001 f9a5 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac6:	48ab      	ldr	r0, [pc, #684]	; (8000d74 <display7SEG_ver+0x364>)
 8000ac8:	f001 f99f 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 2) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d129      	bne.n	8000b26 <display7SEG_ver+0x116>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad8:	48a6      	ldr	r0, [pc, #664]	; (8000d74 <display7SEG_ver+0x364>)
 8000ada:	f001 f996 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	48a3      	ldr	r0, [pc, #652]	; (8000d74 <display7SEG_ver+0x364>)
 8000ae6:	f001 f990 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af0:	48a0      	ldr	r0, [pc, #640]	; (8000d74 <display7SEG_ver+0x364>)
 8000af2:	f001 f98a 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afc:	489d      	ldr	r0, [pc, #628]	; (8000d74 <display7SEG_ver+0x364>)
 8000afe:	f001 f984 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b08:	489a      	ldr	r0, [pc, #616]	; (8000d74 <display7SEG_ver+0x364>)
 8000b0a:	f001 f97e 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	4897      	ldr	r0, [pc, #604]	; (8000d74 <display7SEG_ver+0x364>)
 8000b16:	f001 f978 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b20:	4894      	ldr	r0, [pc, #592]	; (8000d74 <display7SEG_ver+0x364>)
 8000b22:	f001 f972 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 3) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d129      	bne.n	8000b80 <display7SEG_ver+0x170>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	4890      	ldr	r0, [pc, #576]	; (8000d74 <display7SEG_ver+0x364>)
 8000b34:	f001 f969 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3e:	488d      	ldr	r0, [pc, #564]	; (8000d74 <display7SEG_ver+0x364>)
 8000b40:	f001 f963 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4a:	488a      	ldr	r0, [pc, #552]	; (8000d74 <display7SEG_ver+0x364>)
 8000b4c:	f001 f95d 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b56:	4887      	ldr	r0, [pc, #540]	; (8000d74 <display7SEG_ver+0x364>)
 8000b58:	f001 f957 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b62:	4884      	ldr	r0, [pc, #528]	; (8000d74 <display7SEG_ver+0x364>)
 8000b64:	f001 f951 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6e:	4881      	ldr	r0, [pc, #516]	; (8000d74 <display7SEG_ver+0x364>)
 8000b70:	f001 f94b 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7a:	487e      	ldr	r0, [pc, #504]	; (8000d74 <display7SEG_ver+0x364>)
 8000b7c:	f001 f945 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 4) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d129      	bne.n	8000bda <display7SEG_ver+0x1ca>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	4879      	ldr	r0, [pc, #484]	; (8000d74 <display7SEG_ver+0x364>)
 8000b8e:	f001 f93c 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b98:	4876      	ldr	r0, [pc, #472]	; (8000d74 <display7SEG_ver+0x364>)
 8000b9a:	f001 f936 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba4:	4873      	ldr	r0, [pc, #460]	; (8000d74 <display7SEG_ver+0x364>)
 8000ba6:	f001 f930 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb0:	4870      	ldr	r0, [pc, #448]	; (8000d74 <display7SEG_ver+0x364>)
 8000bb2:	f001 f92a 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbc:	486d      	ldr	r0, [pc, #436]	; (8000d74 <display7SEG_ver+0x364>)
 8000bbe:	f001 f924 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc8:	486a      	ldr	r0, [pc, #424]	; (8000d74 <display7SEG_ver+0x364>)
 8000bca:	f001 f91e 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd4:	4867      	ldr	r0, [pc, #412]	; (8000d74 <display7SEG_ver+0x364>)
 8000bd6:	f001 f918 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 5) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	d129      	bne.n	8000c34 <display7SEG_ver+0x224>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	4863      	ldr	r0, [pc, #396]	; (8000d74 <display7SEG_ver+0x364>)
 8000be8:	f001 f90f 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf2:	4860      	ldr	r0, [pc, #384]	; (8000d74 <display7SEG_ver+0x364>)
 8000bf4:	f001 f909 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfe:	485d      	ldr	r0, [pc, #372]	; (8000d74 <display7SEG_ver+0x364>)
 8000c00:	f001 f903 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	485a      	ldr	r0, [pc, #360]	; (8000d74 <display7SEG_ver+0x364>)
 8000c0c:	f001 f8fd 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	4857      	ldr	r0, [pc, #348]	; (8000d74 <display7SEG_ver+0x364>)
 8000c18:	f001 f8f7 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c22:	4854      	ldr	r0, [pc, #336]	; (8000d74 <display7SEG_ver+0x364>)
 8000c24:	f001 f8f1 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2e:	4851      	ldr	r0, [pc, #324]	; (8000d74 <display7SEG_ver+0x364>)
 8000c30:	f001 f8eb 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 6) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d129      	bne.n	8000c8e <display7SEG_ver+0x27e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c40:	484c      	ldr	r0, [pc, #304]	; (8000d74 <display7SEG_ver+0x364>)
 8000c42:	f001 f8e2 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	4849      	ldr	r0, [pc, #292]	; (8000d74 <display7SEG_ver+0x364>)
 8000c4e:	f001 f8dc 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c58:	4846      	ldr	r0, [pc, #280]	; (8000d74 <display7SEG_ver+0x364>)
 8000c5a:	f001 f8d6 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c64:	4843      	ldr	r0, [pc, #268]	; (8000d74 <display7SEG_ver+0x364>)
 8000c66:	f001 f8d0 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c70:	4840      	ldr	r0, [pc, #256]	; (8000d74 <display7SEG_ver+0x364>)
 8000c72:	f001 f8ca 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7c:	483d      	ldr	r0, [pc, #244]	; (8000d74 <display7SEG_ver+0x364>)
 8000c7e:	f001 f8c4 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c88:	483a      	ldr	r0, [pc, #232]	; (8000d74 <display7SEG_ver+0x364>)
 8000c8a:	f001 f8be 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 7) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d129      	bne.n	8000ce8 <display7SEG_ver+0x2d8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9a:	4836      	ldr	r0, [pc, #216]	; (8000d74 <display7SEG_ver+0x364>)
 8000c9c:	f001 f8b5 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca6:	4833      	ldr	r0, [pc, #204]	; (8000d74 <display7SEG_ver+0x364>)
 8000ca8:	f001 f8af 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <display7SEG_ver+0x364>)
 8000cb4:	f001 f8a9 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cbe:	482d      	ldr	r0, [pc, #180]	; (8000d74 <display7SEG_ver+0x364>)
 8000cc0:	f001 f8a3 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cca:	482a      	ldr	r0, [pc, #168]	; (8000d74 <display7SEG_ver+0x364>)
 8000ccc:	f001 f89d 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd6:	4827      	ldr	r0, [pc, #156]	; (8000d74 <display7SEG_ver+0x364>)
 8000cd8:	f001 f897 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce2:	4824      	ldr	r0, [pc, #144]	; (8000d74 <display7SEG_ver+0x364>)
 8000ce4:	f001 f891 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 8) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d129      	bne.n	8000d42 <display7SEG_ver+0x332>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf4:	481f      	ldr	r0, [pc, #124]	; (8000d74 <display7SEG_ver+0x364>)
 8000cf6:	f001 f888 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	481c      	ldr	r0, [pc, #112]	; (8000d74 <display7SEG_ver+0x364>)
 8000d02:	f001 f882 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0c:	4819      	ldr	r0, [pc, #100]	; (8000d74 <display7SEG_ver+0x364>)
 8000d0e:	f001 f87c 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d18:	4816      	ldr	r0, [pc, #88]	; (8000d74 <display7SEG_ver+0x364>)
 8000d1a:	f001 f876 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <display7SEG_ver+0x364>)
 8000d26:	f001 f870 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d30:	4810      	ldr	r0, [pc, #64]	; (8000d74 <display7SEG_ver+0x364>)
 8000d32:	f001 f86a 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <display7SEG_ver+0x364>)
 8000d3e:	f001 f864 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 9) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b09      	cmp	r3, #9
 8000d46:	d12c      	bne.n	8000da2 <display7SEG_ver+0x392>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <display7SEG_ver+0x364>)
 8000d50:	f001 f85b 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <display7SEG_ver+0x364>)
 8000d5c:	f001 f855 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <display7SEG_ver+0x364>)
 8000d68:	f001 f84f 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d72:	e001      	b.n	8000d78 <display7SEG_ver+0x368>
 8000d74:	40010800 	.word	0x40010800
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <display7SEG_ver+0x39c>)
 8000d7a:	f001 f846 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <display7SEG_ver+0x39c>)
 8000d86:	f001 f840 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <display7SEG_ver+0x39c>)
 8000d92:	f001 f83a 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <display7SEG_ver+0x39c>)
 8000d9e:	f001 f834 	bl	8001e0a <HAL_GPIO_WritePin>
	}
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010800 	.word	0x40010800

08000db0 <display7SEG_hor>:

void display7SEG_hor(int num) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d122      	bne.n	8000e04 <display7SEG_hor+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	48bd      	ldr	r0, [pc, #756]	; (80010b8 <display7SEG_hor+0x308>)
 8000dc4:	f001 f821 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2102      	movs	r1, #2
 8000dcc:	48ba      	ldr	r0, [pc, #744]	; (80010b8 <display7SEG_hor+0x308>)
 8000dce:	f001 f81c 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	48b8      	ldr	r0, [pc, #736]	; (80010b8 <display7SEG_hor+0x308>)
 8000dd8:	f001 f817 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2108      	movs	r1, #8
 8000de0:	48b5      	ldr	r0, [pc, #724]	; (80010b8 <display7SEG_hor+0x308>)
 8000de2:	f001 f812 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2110      	movs	r1, #16
 8000dea:	48b3      	ldr	r0, [pc, #716]	; (80010b8 <display7SEG_hor+0x308>)
 8000dec:	f001 f80d 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2120      	movs	r1, #32
 8000df4:	48b0      	ldr	r0, [pc, #704]	; (80010b8 <display7SEG_hor+0x308>)
 8000df6:	f001 f808 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	48ae      	ldr	r0, [pc, #696]	; (80010b8 <display7SEG_hor+0x308>)
 8000e00:	f001 f803 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 1) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d122      	bne.n	8000e50 <display7SEG_hor+0xa0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	48aa      	ldr	r0, [pc, #680]	; (80010b8 <display7SEG_hor+0x308>)
 8000e10:	f000 fffb 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2102      	movs	r1, #2
 8000e18:	48a7      	ldr	r0, [pc, #668]	; (80010b8 <display7SEG_hor+0x308>)
 8000e1a:	f000 fff6 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2104      	movs	r1, #4
 8000e22:	48a5      	ldr	r0, [pc, #660]	; (80010b8 <display7SEG_hor+0x308>)
 8000e24:	f000 fff1 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	48a2      	ldr	r0, [pc, #648]	; (80010b8 <display7SEG_hor+0x308>)
 8000e2e:	f000 ffec 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2110      	movs	r1, #16
 8000e36:	48a0      	ldr	r0, [pc, #640]	; (80010b8 <display7SEG_hor+0x308>)
 8000e38:	f000 ffe7 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2120      	movs	r1, #32
 8000e40:	489d      	ldr	r0, [pc, #628]	; (80010b8 <display7SEG_hor+0x308>)
 8000e42:	f000 ffe2 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	489b      	ldr	r0, [pc, #620]	; (80010b8 <display7SEG_hor+0x308>)
 8000e4c:	f000 ffdd 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 2) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d122      	bne.n	8000e9c <display7SEG_hor+0xec>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4897      	ldr	r0, [pc, #604]	; (80010b8 <display7SEG_hor+0x308>)
 8000e5c:	f000 ffd5 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2102      	movs	r1, #2
 8000e64:	4894      	ldr	r0, [pc, #592]	; (80010b8 <display7SEG_hor+0x308>)
 8000e66:	f000 ffd0 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4892      	ldr	r0, [pc, #584]	; (80010b8 <display7SEG_hor+0x308>)
 8000e70:	f000 ffcb 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2108      	movs	r1, #8
 8000e78:	488f      	ldr	r0, [pc, #572]	; (80010b8 <display7SEG_hor+0x308>)
 8000e7a:	f000 ffc6 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	488d      	ldr	r0, [pc, #564]	; (80010b8 <display7SEG_hor+0x308>)
 8000e84:	f000 ffc1 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	488a      	ldr	r0, [pc, #552]	; (80010b8 <display7SEG_hor+0x308>)
 8000e8e:	f000 ffbc 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	4888      	ldr	r0, [pc, #544]	; (80010b8 <display7SEG_hor+0x308>)
 8000e98:	f000 ffb7 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 3) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d122      	bne.n	8000ee8 <display7SEG_hor+0x138>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4884      	ldr	r0, [pc, #528]	; (80010b8 <display7SEG_hor+0x308>)
 8000ea8:	f000 ffaf 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4881      	ldr	r0, [pc, #516]	; (80010b8 <display7SEG_hor+0x308>)
 8000eb2:	f000 ffaa 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2104      	movs	r1, #4
 8000eba:	487f      	ldr	r0, [pc, #508]	; (80010b8 <display7SEG_hor+0x308>)
 8000ebc:	f000 ffa5 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	487c      	ldr	r0, [pc, #496]	; (80010b8 <display7SEG_hor+0x308>)
 8000ec6:	f000 ffa0 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2110      	movs	r1, #16
 8000ece:	487a      	ldr	r0, [pc, #488]	; (80010b8 <display7SEG_hor+0x308>)
 8000ed0:	f000 ff9b 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	4877      	ldr	r0, [pc, #476]	; (80010b8 <display7SEG_hor+0x308>)
 8000eda:	f000 ff96 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4875      	ldr	r0, [pc, #468]	; (80010b8 <display7SEG_hor+0x308>)
 8000ee4:	f000 ff91 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 4) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d122      	bne.n	8000f34 <display7SEG_hor+0x184>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4871      	ldr	r0, [pc, #452]	; (80010b8 <display7SEG_hor+0x308>)
 8000ef4:	f000 ff89 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2102      	movs	r1, #2
 8000efc:	486e      	ldr	r0, [pc, #440]	; (80010b8 <display7SEG_hor+0x308>)
 8000efe:	f000 ff84 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2104      	movs	r1, #4
 8000f06:	486c      	ldr	r0, [pc, #432]	; (80010b8 <display7SEG_hor+0x308>)
 8000f08:	f000 ff7f 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2108      	movs	r1, #8
 8000f10:	4869      	ldr	r0, [pc, #420]	; (80010b8 <display7SEG_hor+0x308>)
 8000f12:	f000 ff7a 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2110      	movs	r1, #16
 8000f1a:	4867      	ldr	r0, [pc, #412]	; (80010b8 <display7SEG_hor+0x308>)
 8000f1c:	f000 ff75 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2120      	movs	r1, #32
 8000f24:	4864      	ldr	r0, [pc, #400]	; (80010b8 <display7SEG_hor+0x308>)
 8000f26:	f000 ff70 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	4862      	ldr	r0, [pc, #392]	; (80010b8 <display7SEG_hor+0x308>)
 8000f30:	f000 ff6b 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 5) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	d122      	bne.n	8000f80 <display7SEG_hor+0x1d0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	485e      	ldr	r0, [pc, #376]	; (80010b8 <display7SEG_hor+0x308>)
 8000f40:	f000 ff63 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2102      	movs	r1, #2
 8000f48:	485b      	ldr	r0, [pc, #364]	; (80010b8 <display7SEG_hor+0x308>)
 8000f4a:	f000 ff5e 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2104      	movs	r1, #4
 8000f52:	4859      	ldr	r0, [pc, #356]	; (80010b8 <display7SEG_hor+0x308>)
 8000f54:	f000 ff59 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4856      	ldr	r0, [pc, #344]	; (80010b8 <display7SEG_hor+0x308>)
 8000f5e:	f000 ff54 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2110      	movs	r1, #16
 8000f66:	4854      	ldr	r0, [pc, #336]	; (80010b8 <display7SEG_hor+0x308>)
 8000f68:	f000 ff4f 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4851      	ldr	r0, [pc, #324]	; (80010b8 <display7SEG_hor+0x308>)
 8000f72:	f000 ff4a 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	484f      	ldr	r0, [pc, #316]	; (80010b8 <display7SEG_hor+0x308>)
 8000f7c:	f000 ff45 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 6) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d122      	bne.n	8000fcc <display7SEG_hor+0x21c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2101      	movs	r1, #1
 8000f8a:	484b      	ldr	r0, [pc, #300]	; (80010b8 <display7SEG_hor+0x308>)
 8000f8c:	f000 ff3d 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	4848      	ldr	r0, [pc, #288]	; (80010b8 <display7SEG_hor+0x308>)
 8000f96:	f000 ff38 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4846      	ldr	r0, [pc, #280]	; (80010b8 <display7SEG_hor+0x308>)
 8000fa0:	f000 ff33 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4843      	ldr	r0, [pc, #268]	; (80010b8 <display7SEG_hor+0x308>)
 8000faa:	f000 ff2e 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	4841      	ldr	r0, [pc, #260]	; (80010b8 <display7SEG_hor+0x308>)
 8000fb4:	f000 ff29 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2120      	movs	r1, #32
 8000fbc:	483e      	ldr	r0, [pc, #248]	; (80010b8 <display7SEG_hor+0x308>)
 8000fbe:	f000 ff24 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	483c      	ldr	r0, [pc, #240]	; (80010b8 <display7SEG_hor+0x308>)
 8000fc8:	f000 ff1f 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 7) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b07      	cmp	r3, #7
 8000fd0:	d122      	bne.n	8001018 <display7SEG_hor+0x268>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4838      	ldr	r0, [pc, #224]	; (80010b8 <display7SEG_hor+0x308>)
 8000fd8:	f000 ff17 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4835      	ldr	r0, [pc, #212]	; (80010b8 <display7SEG_hor+0x308>)
 8000fe2:	f000 ff12 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4833      	ldr	r0, [pc, #204]	; (80010b8 <display7SEG_hor+0x308>)
 8000fec:	f000 ff0d 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	4830      	ldr	r0, [pc, #192]	; (80010b8 <display7SEG_hor+0x308>)
 8000ff6:	f000 ff08 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	482e      	ldr	r0, [pc, #184]	; (80010b8 <display7SEG_hor+0x308>)
 8001000:	f000 ff03 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2120      	movs	r1, #32
 8001008:	482b      	ldr	r0, [pc, #172]	; (80010b8 <display7SEG_hor+0x308>)
 800100a:	f000 fefe 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	4829      	ldr	r0, [pc, #164]	; (80010b8 <display7SEG_hor+0x308>)
 8001014:	f000 fef9 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 8) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b08      	cmp	r3, #8
 800101c:	d122      	bne.n	8001064 <display7SEG_hor+0x2b4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2101      	movs	r1, #1
 8001022:	4825      	ldr	r0, [pc, #148]	; (80010b8 <display7SEG_hor+0x308>)
 8001024:	f000 fef1 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2102      	movs	r1, #2
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <display7SEG_hor+0x308>)
 800102e:	f000 feec 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2104      	movs	r1, #4
 8001036:	4820      	ldr	r0, [pc, #128]	; (80010b8 <display7SEG_hor+0x308>)
 8001038:	f000 fee7 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2108      	movs	r1, #8
 8001040:	481d      	ldr	r0, [pc, #116]	; (80010b8 <display7SEG_hor+0x308>)
 8001042:	f000 fee2 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2110      	movs	r1, #16
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <display7SEG_hor+0x308>)
 800104c:	f000 fedd 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4818      	ldr	r0, [pc, #96]	; (80010b8 <display7SEG_hor+0x308>)
 8001056:	f000 fed8 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	4816      	ldr	r0, [pc, #88]	; (80010b8 <display7SEG_hor+0x308>)
 8001060:	f000 fed3 	bl	8001e0a <HAL_GPIO_WritePin>
	}

	if (num == 9) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b09      	cmp	r3, #9
 8001068:	d122      	bne.n	80010b0 <display7SEG_hor+0x300>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <display7SEG_hor+0x308>)
 8001070:	f000 fecb 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2102      	movs	r1, #2
 8001078:	480f      	ldr	r0, [pc, #60]	; (80010b8 <display7SEG_hor+0x308>)
 800107a:	f000 fec6 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <display7SEG_hor+0x308>)
 8001084:	f000 fec1 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2108      	movs	r1, #8
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <display7SEG_hor+0x308>)
 800108e:	f000 febc 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <display7SEG_hor+0x308>)
 8001098:	f000 feb7 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2120      	movs	r1, #32
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <display7SEG_hor+0x308>)
 80010a2:	f000 feb2 	bl	8001e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <display7SEG_hor+0x308>)
 80010ac:	f000 fead 	bl	8001e0a <HAL_GPIO_WritePin>
	}
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010c00 	.word	0x40010c00

080010bc <update_7SEG_ver>:

void update_7SEG_ver(int idx_vertical) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	switch (idx_vertical) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <update_7SEG_ver+0x16>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d011      	beq.n	80010f4 <update_7SEG_ver+0x38>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
			display7SEG_ver(led_buffer_ver[1]);
			break;
	}
}
 80010d0:	e021      	b.n	8001116 <update_7SEG_ver+0x5a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	4812      	ldr	r0, [pc, #72]	; (8001120 <update_7SEG_ver+0x64>)
 80010d8:	f000 fe97 	bl	8001e0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <update_7SEG_ver+0x64>)
 80010e4:	f000 fe91 	bl	8001e0a <HAL_GPIO_WritePin>
			display7SEG_ver(led_buffer_ver[0]);
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <update_7SEG_ver+0x68>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fc8f 	bl	8000a10 <display7SEG_ver>
			break;
 80010f2:	e010      	b.n	8001116 <update_7SEG_ver+0x5a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <update_7SEG_ver+0x64>)
 80010fa:	f000 fe86 	bl	8001e0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <update_7SEG_ver+0x64>)
 8001106:	f000 fe80 	bl	8001e0a <HAL_GPIO_WritePin>
			display7SEG_ver(led_buffer_ver[1]);
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <update_7SEG_ver+0x68>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fc7e 	bl	8000a10 <display7SEG_ver>
			break;
 8001114:	bf00      	nop
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010c00 	.word	0x40010c00
 8001124:	20000114 	.word	0x20000114

08001128 <update_7SEG_hor>:

void update_7SEG_hor(int idx_horizontal) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	switch (idx_horizontal) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <update_7SEG_hor+0x16>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d012      	beq.n	8001162 <update_7SEG_hor+0x3a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
			display7SEG_hor(led_buffer_hor[1]);
			break;
	}
}
 800113c:	e023      	b.n	8001186 <update_7SEG_hor+0x5e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	4812      	ldr	r0, [pc, #72]	; (8001190 <update_7SEG_hor+0x68>)
 8001146:	f000 fe60 	bl	8001e0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <update_7SEG_hor+0x68>)
 8001152:	f000 fe5a 	bl	8001e0a <HAL_GPIO_WritePin>
			display7SEG_hor(led_buffer_hor[0]);
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <update_7SEG_hor+0x6c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fe28 	bl	8000db0 <display7SEG_hor>
			break;
 8001160:	e011      	b.n	8001186 <update_7SEG_hor+0x5e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <update_7SEG_hor+0x68>)
 800116a:	f000 fe4e 	bl	8001e0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <update_7SEG_hor+0x68>)
 8001176:	f000 fe48 	bl	8001e0a <HAL_GPIO_WritePin>
			display7SEG_hor(led_buffer_hor[1]);
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <update_7SEG_hor+0x6c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fe16 	bl	8000db0 <display7SEG_hor>
			break;
 8001184:	bf00      	nop
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010c00 	.word	0x40010c00
 8001194:	2000011c 	.word	0x2000011c

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fb34 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f82e 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80011a4:	f000 f868 	bl	8001278 <MX_TIM2_Init>
  MX_GPIO_Init();
 80011a8:	f000 f8b2 	bl	8001310 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011ac:	4811      	ldr	r0, [pc, #68]	; (80011f4 <main+0x5c>)
 80011ae:	f001 fa89 	bl	80026c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(2, 20);		// hiển thị 7SEG
 80011b2:	2114      	movs	r1, #20
 80011b4:	2002      	movs	r0, #2
 80011b6:	f000 f921 	bl	80013fc <setTimer>
  setTimer(4, 250); 	// nhấp nháy đèn khi modify time duration tần số 2Hz
 80011ba:	21fa      	movs	r1, #250	; 0xfa
 80011bc:	2004      	movs	r0, #4
 80011be:	f000 f91d 	bl	80013fc <setTimer>
  setTimer(9, 1000); 	// check setTimer
 80011c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c6:	2009      	movs	r0, #9
 80011c8:	f000 f918 	bl	80013fc <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (timer_flag[9] == 1) {
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <main+0x60>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <main+0x4e>
		  setTimer(9, 1000);
 80011d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d8:	2009      	movs	r0, #9
 80011da:	f000 f90f 	bl	80013fc <setTimer>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011de:	2120      	movs	r1, #32
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <main+0x64>)
 80011e2:	f000 fe2a 	bl	8001e3a <HAL_GPIO_TogglePin>
	  }

	  fsm_manual();
 80011e6:	f7ff fa2b 	bl	8000640 <fsm_manual>
	  fsm_setting();
 80011ea:	f7ff fb09 	bl	8000800 <fsm_setting>
	  fsm_automatic();
 80011ee:	f7ff fa17 	bl	8000620 <fsm_automatic>
	  if (timer_flag[9] == 1) {
 80011f2:	e7eb      	b.n	80011cc <main+0x34>
 80011f4:	20000174 	.word	0x20000174
 80011f8:	200001bc 	.word	0x200001bc
 80011fc:	40010800 	.word	0x40010800

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2228      	movs	r2, #40	; 0x28
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fe08 	bl	8002e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fe18 	bl	8001e6c <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001242:	f000 f8d5 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f884 	bl	800236c <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800126a:	f000 f8c1 	bl	80013f0 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3740      	adds	r7, #64	; 0x40
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_TIM2_Init+0x94>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_TIM2_Init+0x94>)
 800129e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_TIM2_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_TIM2_Init+0x94>)
 80012ac:	2209      	movs	r2, #9
 80012ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_TIM2_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012bc:	4813      	ldr	r0, [pc, #76]	; (800130c <MX_TIM2_Init+0x94>)
 80012be:	f001 f9b1 	bl	8002624 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012c8:	f000 f892 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_TIM2_Init+0x94>)
 80012da:	f001 fb2f 	bl	800293c <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012e4:	f000 f884 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_TIM2_Init+0x94>)
 80012f6:	f001 fd07 	bl	8002d08 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001300:	f000 f876 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000174 	.word	0x20000174

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_GPIO_Init+0xbc>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <MX_GPIO_Init+0xbc>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_GPIO_Init+0xbc>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_GPIO_Init+0xbc>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <MX_GPIO_Init+0xbc>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_GPIO_Init+0xbc>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001354:	2200      	movs	r2, #0
 8001356:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <MX_GPIO_Init+0xc0>)
 800135c:	f000 fd55 	bl	8001e0a <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001360:	2200      	movs	r2, #0
 8001362:	f241 31ff 	movw	r1, #5119	; 0x13ff
 8001366:	481b      	ldr	r0, [pc, #108]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001368:	f000 fd4f 	bl	8001e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800136c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001370:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <MX_GPIO_Init+0xc0>)
 8001386:	f000 fbaf 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800138a:	f241 33ff 	movw	r3, #5119	; 0x13ff
 800138e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0xc4>)
 80013a4:	f000 fba0 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_GPIO_Init+0xc4>)
 80013be:	f000 fb93 	bl	8001ae8 <HAL_GPIO_Init>

}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	timerRun();
 80013e0:	f000 f82c 	bl	800143c <timerRun>
	getKeyInput();
 80013e4:	f7fe fecc 	bl	8000180 <getKeyInput>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <setTimer>:
#include"software_timer.h"

int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <setTimer+0x34>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2100      	movs	r1, #0
 800140c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TICK;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <setTimer+0x38>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	1092      	asrs	r2, r2, #2
 800141a:	17db      	asrs	r3, r3, #31
 800141c:	1ad2      	subs	r2, r2, r3
 800141e:	4906      	ldr	r1, [pc, #24]	; (8001438 <setTimer+0x3c>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	200001bc 	.word	0x200001bc
 8001434:	66666667 	.word	0x66666667
 8001438:	20000124 	.word	0x20000124

0800143c <timerRun>:

void timerRun() {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	e01c      	b.n	8001482 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <timerRun+0x58>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dd13      	ble.n	800147c <timerRun+0x40>
			timer_counter[i]--;
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <timerRun+0x58>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <timerRun+0x58>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <timerRun+0x58>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	2b00      	cmp	r3, #0
 8001470:	dc04      	bgt.n	800147c <timerRun+0x40>
				timer_flag[i] = 1;
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <timerRun+0x5c>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2101      	movs	r1, #1
 8001478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b09      	cmp	r3, #9
 8001486:	dddf      	ble.n	8001448 <timerRun+0xc>
			}
		}
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000124 	.word	0x20000124
 8001498:	200001bc 	.word	0x200001bc

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_MspInit+0x5c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x60>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_MspInit+0x60>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001510:	d113      	bne.n	800153a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201c      	movs	r0, #28
 8001530:	f000 faa3 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001534:	201c      	movs	r0, #28
 8001536:	f000 fabc 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f981 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM2_IRQHandler+0x10>)
 800159e:	f001 f8dd 	bl	800275c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000174 	.word	0x20000174

080015ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <red_led_ver>:
 *      Author: ACER
 */
#include "traffic_light.h"

//đèn giao thông cho chiều dọc
void red_led_ver() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2104      	movs	r1, #4
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <red_led_ver+0x28>)
 80015c2:	f000 fc22 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2108      	movs	r1, #8
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <red_led_ver+0x28>)
 80015cc:	f000 fc1d 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <red_led_ver+0x28>)
 80015d6:	f000 fc18 	bl	8001e0a <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010800 	.word	0x40010800

080015e4 <yellow_led_ver>:

void yellow_led_ver() {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2104      	movs	r1, #4
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <yellow_led_ver+0x28>)
 80015ee:	f000 fc0c 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2108      	movs	r1, #8
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <yellow_led_ver+0x28>)
 80015f8:	f000 fc07 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <yellow_led_ver+0x28>)
 8001602:	f000 fc02 	bl	8001e0a <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40010800 	.word	0x40010800

08001610 <green_led_ver>:

void green_led_ver() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2104      	movs	r1, #4
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <green_led_ver+0x28>)
 800161a:	f000 fbf6 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2108      	movs	r1, #8
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <green_led_ver+0x28>)
 8001624:	f000 fbf1 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2110      	movs	r1, #16
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <green_led_ver+0x28>)
 800162e:	f000 fbec 	bl	8001e0a <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40010800 	.word	0x40010800

0800163c <red_led_hor>:

//********************************************************************
//đèn giao thông cho chiều ngang
void red_led_hor() {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <red_led_hor+0x28>)
 8001646:	f000 fbe0 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <red_led_hor+0x28>)
 8001650:	f000 fbdb 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <red_led_hor+0x28>)
 800165c:	f000 fbd5 	bl	8001e0a <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40010800 	.word	0x40010800

08001668 <yellow_led_hor>:

void yellow_led_hor() {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <yellow_led_hor+0x28>)
 8001672:	f000 fbca 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <yellow_led_hor+0x28>)
 800167c:	f000 fbc5 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001686:	4802      	ldr	r0, [pc, #8]	; (8001690 <yellow_led_hor+0x28>)
 8001688:	f000 fbbf 	bl	8001e0a <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40010800 	.word	0x40010800

08001694 <green_led_hor>:

void green_led_hor() {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	4807      	ldr	r0, [pc, #28]	; (80016bc <green_led_hor+0x28>)
 800169e:	f000 fbb4 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <green_led_hor+0x28>)
 80016a8:	f000 fbaf 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	4802      	ldr	r0, [pc, #8]	; (80016bc <green_led_hor+0x28>)
 80016b4:	f000 fba9 	bl	8001e0a <HAL_GPIO_WritePin>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40010800 	.word	0x40010800

080016c0 <toggle_red_led>:

//**********************************************************************
//nhấp nháy đèn cần modify và tắt các đèn không modify
void toggle_red_led() {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80016c4:	2104      	movs	r1, #4
 80016c6:	4804      	ldr	r0, [pc, #16]	; (80016d8 <toggle_red_led+0x18>)
 80016c8:	f000 fbb7 	bl	8001e3a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80016cc:	2140      	movs	r1, #64	; 0x40
 80016ce:	4802      	ldr	r0, [pc, #8]	; (80016d8 <toggle_red_led+0x18>)
 80016d0:	f000 fbb3 	bl	8001e3a <HAL_GPIO_TogglePin>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40010800 	.word	0x40010800

080016dc <toggle_yellow_led>:

void toggle_yellow_led() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80016e0:	2108      	movs	r1, #8
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <toggle_yellow_led+0x18>)
 80016e4:	f000 fba9 	bl	8001e3a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	4802      	ldr	r0, [pc, #8]	; (80016f4 <toggle_yellow_led+0x18>)
 80016ec:	f000 fba5 	bl	8001e3a <HAL_GPIO_TogglePin>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40010800 	.word	0x40010800

080016f8 <toggle_green_led>:

void toggle_green_led() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80016fc:	2110      	movs	r1, #16
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <toggle_green_led+0x1c>)
 8001700:	f000 fb9b 	bl	8001e3a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <toggle_green_led+0x1c>)
 800170a:	f000 fb96 	bl	8001e3a <HAL_GPIO_TogglePin>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010800 	.word	0x40010800

08001718 <turn_off_yellow_green>:

//**********************************************************************
//tắt các đèn không cần modify
void turn_off_yellow_green() {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2108      	movs	r1, #8
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <turn_off_yellow_green+0x34>)
 8001722:	f000 fb72 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <turn_off_yellow_green+0x34>)
 800172c:	f000 fb6d 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <turn_off_yellow_green+0x34>)
 8001736:	f000 fb68 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <turn_off_yellow_green+0x34>)
 8001742:	f000 fb62 	bl	8001e0a <HAL_GPIO_WritePin>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40010800 	.word	0x40010800

08001750 <turn_off_red_green>:

void turn_off_red_green() {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	2104      	movs	r1, #4
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <turn_off_red_green+0x34>)
 800175a:	f000 fb56 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2110      	movs	r1, #16
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <turn_off_red_green+0x34>)
 8001764:	f000 fb51 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2140      	movs	r1, #64	; 0x40
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <turn_off_red_green+0x34>)
 800176e:	f000 fb4c 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <turn_off_red_green+0x34>)
 800177a:	f000 fb46 	bl	8001e0a <HAL_GPIO_WritePin>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40010800 	.word	0x40010800

08001788 <turn_off_red_yellow>:

void turn_off_red_yellow() {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2104      	movs	r1, #4
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <turn_off_red_yellow+0x30>)
 8001792:	f000 fb3a 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2108      	movs	r1, #8
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <turn_off_red_yellow+0x30>)
 800179c:	f000 fb35 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2140      	movs	r1, #64	; 0x40
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <turn_off_red_yellow+0x30>)
 80017a6:	f000 fb30 	bl	8001e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	4802      	ldr	r0, [pc, #8]	; (80017b8 <turn_off_red_yellow+0x30>)
 80017b0:	f000 fb2b 	bl	8001e0a <HAL_GPIO_WritePin>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40010800 	.word	0x40010800

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff fef6 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c2:	490c      	ldr	r1, [pc, #48]	; (80017f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017d8:	4c09      	ldr	r4, [pc, #36]	; (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f001 faf9 	bl	8002ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff fcd5 	bl	8001198 <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80017f8:	08002e78 	.word	0x08002e78
  ldr r2, =_sbss
 80017fc:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001800:	200001e8 	.word	0x200001e8

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x28>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f923 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fe3a 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f93b 	bl	8001ace <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f903 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200000e4 	.word	0x200000e4
 800188c:	200000ec 	.word	0x200000ec
 8001890:	200000e8 	.word	0x200000e8

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x20>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	200000ec 	.word	0x200000ec
 80018b4:	200001e4 	.word	0x200001e4

080018b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	200001e4 	.word	0x200001e4

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4906      	ldr	r1, [pc, #24]	; (8001964 <__NVIC_EnableIRQ+0x34>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff90 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff2d 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff42 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff90 	bl	80019bc <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5f 	bl	8001968 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff35 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e148      	b.n	8001d8e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001afc:	2201      	movs	r2, #1
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8137 	bne.w	8001d88 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4aa3      	ldr	r2, [pc, #652]	; (8001dac <HAL_GPIO_Init+0x2c4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d05e      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b24:	4aa1      	ldr	r2, [pc, #644]	; (8001dac <HAL_GPIO_Init+0x2c4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d875      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b2a:	4aa1      	ldr	r2, [pc, #644]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d058      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b30:	4a9f      	ldr	r2, [pc, #636]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d86f      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b36:	4a9f      	ldr	r2, [pc, #636]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d052      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a9d      	ldr	r2, [pc, #628]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d869      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b42:	4a9d      	ldr	r2, [pc, #628]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04c      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b48:	4a9b      	ldr	r2, [pc, #620]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d863      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b4e:	4a9b      	ldr	r2, [pc, #620]	; (8001dbc <HAL_GPIO_Init+0x2d4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d046      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b54:	4a99      	ldr	r2, [pc, #612]	; (8001dbc <HAL_GPIO_Init+0x2d4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d85d      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d82a      	bhi.n	8001bb4 <HAL_GPIO_Init+0xcc>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d859      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_GPIO_Init+0x80>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001bcf 	.word	0x08001bcf
 8001b74:	08001c11 	.word	0x08001c11
 8001b78:	08001c17 	.word	0x08001c17
 8001b7c:	08001c17 	.word	0x08001c17
 8001b80:	08001c17 	.word	0x08001c17
 8001b84:	08001c17 	.word	0x08001c17
 8001b88:	08001c17 	.word	0x08001c17
 8001b8c:	08001c17 	.word	0x08001c17
 8001b90:	08001c17 	.word	0x08001c17
 8001b94:	08001c17 	.word	0x08001c17
 8001b98:	08001c17 	.word	0x08001c17
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001c17 	.word	0x08001c17
 8001ba4:	08001c17 	.word	0x08001c17
 8001ba8:	08001c17 	.word	0x08001c17
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	4a82      	ldr	r2, [pc, #520]	; (8001dc0 <HAL_GPIO_Init+0x2d8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bba:	e02c      	b.n	8001c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e029      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e024      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e01f      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e01a      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bea:	2304      	movs	r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e013      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	611a      	str	r2, [r3, #16]
          break;
 8001c02:	e009      	b.n	8001c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c04:	2308      	movs	r3, #8
 8001c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	615a      	str	r2, [r3, #20]
          break;
 8001c0e:	e003      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          break;
 8001c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d801      	bhi.n	8001c22 <HAL_GPIO_Init+0x13a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_Init+0x13e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d802      	bhi.n	8001c34 <HAL_GPIO_Init+0x14c>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_Init+0x152>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3b08      	subs	r3, #8
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	210f      	movs	r1, #15
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8090 	beq.w	8001d88 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_GPIO_Init+0x2dc>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c80:	4a51      	ldr	r2, [pc, #324]	; (8001dc8 <HAL_GPIO_Init+0x2e0>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a49      	ldr	r2, [pc, #292]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00d      	beq.n	8001cc8 <HAL_GPIO_Init+0x1e0>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a48      	ldr	r2, [pc, #288]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <HAL_GPIO_Init+0x1dc>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a47      	ldr	r2, [pc, #284]	; (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_GPIO_Init+0x1d8>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e004      	b.n	8001cca <HAL_GPIO_Init+0x1e2>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x1e2>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <HAL_GPIO_Init+0x1e2>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ccc:	f002 0203 	and.w	r2, r2, #3
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cda:	493b      	ldr	r1, [pc, #236]	; (8001dc8 <HAL_GPIO_Init+0x2e0>)
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4937      	ldr	r1, [pc, #220]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4933      	ldr	r1, [pc, #204]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	492d      	ldr	r1, [pc, #180]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4923      	ldr	r1, [pc, #140]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d52:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	491f      	ldr	r1, [pc, #124]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4919      	ldr	r1, [pc, #100]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4915      	ldr	r1, [pc, #84]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f47f aeaf 	bne.w	8001afc <HAL_GPIO_Init+0x14>
  }
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	372c      	adds	r7, #44	; 0x2c
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	10320000 	.word	0x10320000
 8001db0:	10310000 	.word	0x10310000
 8001db4:	10220000 	.word	0x10220000
 8001db8:	10210000 	.word	0x10210000
 8001dbc:	10120000 	.word	0x10120000
 8001dc0:	10110000 	.word	0x10110000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	40010c00 	.word	0x40010c00
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	40010400 	.word	0x40010400

08001ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]
 8001e16:	4613      	mov	r3, r2
 8001e18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1a:	787b      	ldrb	r3, [r7, #1]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e20:	887a      	ldrh	r2, [r7, #2]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e26:	e003      	b.n	8001e30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	611a      	str	r2, [r3, #16]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	041a      	lsls	r2, r3, #16
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e26c      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8087 	beq.w	8001f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e8c:	4b92      	ldr	r3, [pc, #584]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d00c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e98:	4b8f      	ldr	r3, [pc, #572]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d112      	bne.n	8001eca <HAL_RCC_OscConfig+0x5e>
 8001ea4:	4b8c      	ldr	r3, [pc, #560]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d10b      	bne.n	8001eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb2:	4b89      	ldr	r3, [pc, #548]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d06c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x12c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d168      	bne.n	8001f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e246      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x76>
 8001ed4:	4b80      	ldr	r3, [pc, #512]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7f      	ldr	r2, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e02e      	b.n	8001f40 <HAL_RCC_OscConfig+0xd4>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x98>
 8001eea:	4b7b      	ldr	r3, [pc, #492]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7a      	ldr	r2, [pc, #488]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b78      	ldr	r3, [pc, #480]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a77      	ldr	r2, [pc, #476]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0xd4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0xbc>
 8001f0e:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a71      	ldr	r2, [pc, #452]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6e      	ldr	r2, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0xd4>
 8001f28:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6a      	ldr	r2, [pc, #424]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a67      	ldr	r2, [pc, #412]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fcb6 	bl	80018b8 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fcb2 	bl	80018b8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1fa      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe4>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fca2 	bl	80018b8 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fc9e 	bl	80018b8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1e6      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x10c>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d063      	beq.n	800206e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00b      	beq.n	8001fca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fb2:	4b49      	ldr	r3, [pc, #292]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d11c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x18c>
 8001fbe:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d116      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x176>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e1ba      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4939      	ldr	r1, [pc, #228]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	e03a      	b.n	800206e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002000:	4b36      	ldr	r3, [pc, #216]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fc57 	bl	80018b8 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200e:	f7ff fc53 	bl	80018b8 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e19b      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4927      	ldr	r1, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fc36 	bl	80018b8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7ff fc32 	bl	80018b8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e17a      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d03a      	beq.n	80020f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d019      	beq.n	80020b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_RCC_OscConfig+0x274>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7ff fc16 	bl	80018b8 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff fc12 	bl	80018b8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e15a      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f000 fa9a 	bl	80025e8 <RCC_Delay>
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_RCC_OscConfig+0x274>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020bc:	f7ff fbfc 	bl	80018b8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c2:	e00f      	b.n	80020e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff fbf8 	bl	80018b8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d908      	bls.n	80020e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e140      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	42420000 	.word	0x42420000
 80020e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b9e      	ldr	r3, [pc, #632]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e9      	bne.n	80020c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a6 	beq.w	800224a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b97      	ldr	r3, [pc, #604]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b94      	ldr	r3, [pc, #592]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4a93      	ldr	r2, [pc, #588]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	61d3      	str	r3, [r2, #28]
 800211a:	4b91      	ldr	r3, [pc, #580]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4b8e      	ldr	r3, [pc, #568]	; (8002364 <HAL_RCC_OscConfig+0x4f8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002136:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <HAL_RCC_OscConfig+0x4f8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a8a      	ldr	r2, [pc, #552]	; (8002364 <HAL_RCC_OscConfig+0x4f8>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002142:	f7ff fbb9 	bl	80018b8 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7ff fbb5 	bl	80018b8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	; 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0fd      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b81      	ldr	r3, [pc, #516]	; (8002364 <HAL_RCC_OscConfig+0x4f8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x312>
 8002170:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a7a      	ldr	r2, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e02d      	b.n	80021da <HAL_RCC_OscConfig+0x36e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x334>
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	4b73      	ldr	r3, [pc, #460]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a72      	ldr	r2, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	e01c      	b.n	80021da <HAL_RCC_OscConfig+0x36e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x356>
 80021a8:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a6c      	ldr	r2, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a69      	ldr	r2, [pc, #420]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e00b      	b.n	80021da <HAL_RCC_OscConfig+0x36e>
 80021c2:	4b67      	ldr	r3, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a66      	ldr	r2, [pc, #408]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	4b64      	ldr	r3, [pc, #400]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a63      	ldr	r2, [pc, #396]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d015      	beq.n	800220e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fb69 	bl	80018b8 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff fb65 	bl	80018b8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0ab      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b57      	ldr	r3, [pc, #348]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCC_OscConfig+0x37e>
 800220c:	e014      	b.n	8002238 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7ff fb53 	bl	80018b8 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7ff fb4f 	bl	80018b8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e095      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002248:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8081 	beq.w	8002356 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d061      	beq.n	8002324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d146      	bne.n	80022f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_RCC_OscConfig+0x4fc>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff fb23 	bl	80018b8 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7ff fb1f 	bl	80018b8 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e067      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	4b35      	ldr	r3, [pc, #212]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d108      	bne.n	80022b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	492d      	ldr	r1, [pc, #180]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a19      	ldr	r1, [r3, #32]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	430b      	orrs	r3, r1
 80022c2:	4927      	ldr	r1, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x4fc>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff faf3 	bl	80018b8 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7ff faef 	bl	80018b8 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e037      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x46a>
 80022f4:	e02f      	b.n	8002356 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <HAL_RCC_OscConfig+0x4fc>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fadc 	bl	80018b8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff fad8 	bl	80018b8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e020      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x498>
 8002322:	e018      	b.n	8002356 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e013      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
 8002368:	42420060 	.word	0x42420060

0800236c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0d0      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d910      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 0207 	bic.w	r2, r3, #7
 8002396:	4965      	ldr	r1, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d040      	beq.n	800248c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e073      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06b      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4936      	ldr	r1, [pc, #216]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800245c:	f7ff fa2c 	bl	80018b8 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7ff fa28 	bl	80018b8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e053      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d210      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4922      	ldr	r1, [pc, #136]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f821 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490a      	ldr	r1, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1cc>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1d0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f98a 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40022000 	.word	0x40022000
 8002530:	40021000 	.word	0x40021000
 8002534:	08002e4c 	.word	0x08002e4c
 8002538:	200000e4 	.word	0x200000e4
 800253c:	200000e8 	.word	0x200000e8

08002540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x30>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x36>
 800256e:	e027      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	613b      	str	r3, [r7, #16]
      break;
 8002574:	e027      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002580:	5cd3      	ldrb	r3, [r2, r3]
 8002582:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0c5b      	lsrs	r3, r3, #17
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025a2:	fb02 f203 	mul.w	r2, r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e004      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	613b      	str	r3, [r7, #16]
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	613b      	str	r3, [r7, #16]
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	693b      	ldr	r3, [r7, #16]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	007a1200 	.word	0x007a1200
 80025dc:	08002e5c 	.word	0x08002e5c
 80025e0:	08002e6c 	.word	0x08002e6c
 80025e4:	003d0900 	.word	0x003d0900

080025e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <RCC_Delay+0x34>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <RCC_Delay+0x38>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0a5b      	lsrs	r3, r3, #9
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002604:	bf00      	nop
  }
  while (Delay --);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	60fa      	str	r2, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f9      	bne.n	8002604 <RCC_Delay+0x1c>
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	200000e4 	.word	0x200000e4
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e041      	b.n	80026ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe ff58 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f000 fa56 	bl	8002b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d001      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e035      	b.n	8002748 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <HAL_TIM_Base_Start_IT+0x90>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0x4e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002706:	d004      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0x4e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a12      	ldr	r2, [pc, #72]	; (8002758 <HAL_TIM_Base_Start_IT+0x94>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d111      	bne.n	8002736 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b06      	cmp	r3, #6
 8002722:	d010      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002734:	e007      	b.n	8002746 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40000400 	.word	0x40000400

0800275c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d020      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01b      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0202 	mvn.w	r2, #2
 8002790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f998 	bl	8002adc <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f98b 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f99a 	bl	8002aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d020      	beq.n	800280c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0204 	mvn.w	r2, #4
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f972 	bl	8002adc <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f965 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f974 	bl	8002aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d020      	beq.n	8002858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0208 	mvn.w	r2, #8
 8002828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2204      	movs	r2, #4
 800282e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f94c 	bl	8002adc <HAL_TIM_IC_CaptureCallback>
 8002844:	e005      	b.n	8002852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f93f 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f94e 	bl	8002aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d020      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01b      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0210 	mvn.w	r2, #16
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2208      	movs	r2, #8
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f926 	bl	8002adc <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f919 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f928 	bl	8002aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00c      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0201 	mvn.w	r2, #1
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fd88 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa6f 	bl	8002dca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8f8 	bl	8002b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0220 	mvn.w	r2, #32
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa42 	bl	8002db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIM_ConfigClockSource+0x1c>
 8002954:	2302      	movs	r3, #2
 8002956:	e0b4      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x186>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800297e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d03e      	beq.n	8002a10 <HAL_TIM_ConfigClockSource+0xd4>
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002996:	f200 8087 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	f000 8086 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x172>
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d87f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d01a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xa6>
 80029ac:	2b70      	cmp	r3, #112	; 0x70
 80029ae:	d87b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b60      	cmp	r3, #96	; 0x60
 80029b2:	d050      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x11a>
 80029b4:	2b60      	cmp	r3, #96	; 0x60
 80029b6:	d877      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029b8:	2b50      	cmp	r3, #80	; 0x50
 80029ba:	d03c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0xfa>
 80029bc:	2b50      	cmp	r3, #80	; 0x50
 80029be:	d873      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d058      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x13a>
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d86f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d064      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029cc:	2b30      	cmp	r3, #48	; 0x30
 80029ce:	d86b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d060      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d867      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d05a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15a>
 80029e0:	e062      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f000 f96a 	bl	8002cca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
      break;
 8002a0e:	e04f      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f000 f953 	bl	8002cca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a32:	609a      	str	r2, [r3, #8]
      break;
 8002a34:	e03c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 f8ca 	bl	8002bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2150      	movs	r1, #80	; 0x50
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f921 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a54:	e02c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f000 f8e8 	bl	8002c38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2160      	movs	r1, #96	; 0x60
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f911 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a74:	e01c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 f8aa 	bl	8002bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f901 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a94:	e00c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 f8f8 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002aa6:	e003      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e000      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
	...

08002b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <TIM_Base_SetConfig+0xc0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <TIM_Base_SetConfig+0x28>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0x28>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <TIM_Base_SetConfig+0xc4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <TIM_Base_SetConfig+0xc0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <TIM_Base_SetConfig+0x52>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d003      	beq.n	8002b66 <TIM_Base_SetConfig+0x52>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <TIM_Base_SetConfig+0xc4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d108      	bne.n	8002b78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <TIM_Base_SetConfig+0xc0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d103      	bne.n	8002bac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400

08002bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f023 0201 	bic.w	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 030a 	bic.w	r3, r3, #10
 8002c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0210 	bic.w	r2, r3, #16
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f043 0307 	orr.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b087      	sub	sp, #28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	021a      	lsls	r2, r3, #8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e041      	b.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d004      	beq.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10c      	bne.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40000400 	.word	0x40000400

08002db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <__libc_init_array>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	2600      	movs	r6, #0
 8002de0:	4d0c      	ldr	r5, [pc, #48]	; (8002e14 <__libc_init_array+0x38>)
 8002de2:	4c0d      	ldr	r4, [pc, #52]	; (8002e18 <__libc_init_array+0x3c>)
 8002de4:	1b64      	subs	r4, r4, r5
 8002de6:	10a4      	asrs	r4, r4, #2
 8002de8:	42a6      	cmp	r6, r4
 8002dea:	d109      	bne.n	8002e00 <__libc_init_array+0x24>
 8002dec:	f000 f822 	bl	8002e34 <_init>
 8002df0:	2600      	movs	r6, #0
 8002df2:	4d0a      	ldr	r5, [pc, #40]	; (8002e1c <__libc_init_array+0x40>)
 8002df4:	4c0a      	ldr	r4, [pc, #40]	; (8002e20 <__libc_init_array+0x44>)
 8002df6:	1b64      	subs	r4, r4, r5
 8002df8:	10a4      	asrs	r4, r4, #2
 8002dfa:	42a6      	cmp	r6, r4
 8002dfc:	d105      	bne.n	8002e0a <__libc_init_array+0x2e>
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
 8002e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e04:	4798      	blx	r3
 8002e06:	3601      	adds	r6, #1
 8002e08:	e7ee      	b.n	8002de8 <__libc_init_array+0xc>
 8002e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0e:	4798      	blx	r3
 8002e10:	3601      	adds	r6, #1
 8002e12:	e7f2      	b.n	8002dfa <__libc_init_array+0x1e>
 8002e14:	08002e70 	.word	0x08002e70
 8002e18:	08002e70 	.word	0x08002e70
 8002e1c:	08002e70 	.word	0x08002e70
 8002e20:	08002e74 	.word	0x08002e74

08002e24 <memset>:
 8002e24:	4603      	mov	r3, r0
 8002e26:	4402      	add	r2, r0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <memset+0xa>
 8002e2c:	4770      	bx	lr
 8002e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e32:	e7f9      	b.n	8002e28 <memset+0x4>

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
